{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/Users/brayhanjaramillo/DocumentosBrayhan/React Native/repositorio/petGeo5/app/screens/account/UserLogged.js\";\nimport React, { useRef, useState, useEffect } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { Button } from 'react-native-elements';\nimport * as firebase from 'firebase';\nimport Toast from 'react-native-easy-toast';\nimport Loading from \"../../components/Loading\";\nimport InfoUser from \"../../components/account/InfoUser\";\nimport AccountOptions from \"../../components/account/AccountOptions\";\n\nfunction UserLogged() {\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      loading = _useState2[0],\n      setLoading = _useState2[1];\n\n  var _useState3 = useState(''),\n      _useState4 = _slicedToArray(_useState3, 2),\n      loadingText = _useState4[0],\n      setLoadingText = _useState4[1];\n\n  var _useState5 = useState({\n    displayName: '',\n    email: ''\n  }),\n      _useState6 = _slicedToArray(_useState5, 2),\n      userInfo = _useState6[0],\n      setUserInfo = _useState6[1];\n\n  var toastRef = useRef();\n\n  var _useState7 = useState(false),\n      _useState8 = _slicedToArray(_useState7, 2),\n      reloadUserInfo = _useState8[0],\n      setReloadUserInfo = _useState8[1];\n\n  useEffect(function () {\n    (function _callee() {\n      var user;\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(firebase.auth().currentUser);\n\n            case 2:\n              user = _context.sent;\n              console.log(user);\n              setUserInfo(user);\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    })();\n\n    setReloadUserInfo(false);\n  }, [reloadUserInfo]);\n  return React.createElement(View, {\n    style: styles.viewUserInfo,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 3\n    }\n  }, userInfo && React.createElement(InfoUser, {\n    userInfo: userInfo,\n    toastRef: toastRef,\n    setLoading: setLoading,\n    setLoadingText: setLoadingText,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 17\n    }\n  }), React.createElement(AccountOptions, {\n    userInfo: userInfo,\n    toastRef: toastRef,\n    setReloadUserInfo: setReloadUserInfo,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 4\n    }\n  }), React.createElement(Button, {\n    title: \"Cerrar Sesi\\xF3n\",\n    buttonStyle: styles.btnCloseSession,\n    titleStyle: styles.btnCloseSessionText,\n    onPress: function onPress() {\n      return firebase.auth().signOut();\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 4\n    }\n  }), React.createElement(Toast, {\n    ref: toastRef,\n    position: \"center\",\n    opacity: 0.9,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 4\n    }\n  }), React.createElement(Loading, {\n    text: loadingText,\n    isVisible: loading,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 4\n    }\n  }));\n}\n\nexport default UserLogged;\nvar styles = StyleSheet.create({\n  viewUserInfo: {\n    minHeight: '100%',\n    backgroundColor: '#f2f2f2'\n  },\n  btnCloseSession: {\n    marginTop: 30,\n    borderRadius: 10,\n    backgroundColor: '#FFF',\n    borderTopColor: '#E3E3E3',\n    borderBottomWidth: 1,\n    borderBottomColor: '#E3E3E3',\n    paddingTop: 10,\n    paddingBottom: 10\n  },\n  btnCloseSessionText: {\n    color: '#1A89E7'\n  }\n});","map":{"version":3,"sources":["/Users/brayhanjaramillo/DocumentosBrayhan/React Native/repositorio/petGeo5/app/screens/account/UserLogged.js"],"names":["React","useRef","useState","useEffect","Button","firebase","Toast","Loading","InfoUser","AccountOptions","UserLogged","loading","setLoading","loadingText","setLoadingText","displayName","email","userInfo","setUserInfo","toastRef","reloadUserInfo","setReloadUserInfo","auth","currentUser","user","console","log","styles","viewUserInfo","btnCloseSession","btnCloseSessionText","signOut","StyleSheet","create","minHeight","backgroundColor","marginTop","borderRadius","borderTopColor","borderBottomWidth","borderBottomColor","paddingTop","paddingBottom","color"],"mappings":"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","sourcesContent":["import React, { useRef, useState, useEffect } from 'react';\nimport { View, Text, StyleSheet } from 'react-native';\nimport { Button } from 'react-native-elements';\nimport * as firebase from 'firebase';\nimport Toast from 'react-native-easy-toast';\nimport Loading from '../../components/Loading';\n\nimport InfoUser from '../../components/account/InfoUser'\nimport AccountOptions from '../../components/account/AccountOptions'\n\nfunction UserLogged() {\n\tconst [ loading, setLoading ] = useState(false);\n    const [ loadingText, setLoadingText ] = useState('');\n    const [userInfo, setUserInfo] = useState({\n\t\tdisplayName: '',\n\t\temail: ''\n\t})\n\tconst toastRef = useRef();\n\t\n\t//variable que nos sirve para actualizar la informacion del usuario\n\tconst [reloadUserInfo, setReloadUserInfo] = useState(false)\n    \n\n    //cargamos los datos del usuario \n    useEffect(() => {\n        (async () => {\n            const user = await firebase.auth().currentUser\n            console.log(user)\n            //cargando datos al userInfo, contiene toda la informacion del usuario\n            setUserInfo(user)\n\t\t})()\n\t\tsetReloadUserInfo(false)\n    }, [reloadUserInfo])\n\n\n\n\n\treturn (\n\t\t<View style={styles.viewUserInfo}>\n\n            {\n                //se valida que la varable userInfo sea diferente de {} o de null\n\t\t\t\t//se pasan el setLoading para poder actualizar el avatar el tiempo real\n\t\t\t\t//como tambien para reutilizarlo\n\t\t\t\tuserInfo && <InfoUser userInfo={userInfo} toastRef={toastRef} setLoading={setLoading} setLoadingText={setLoadingText}/>\n            }\n\t\t\t\n\t\t\t<AccountOptions userInfo={userInfo} toastRef={toastRef} setReloadUserInfo={setReloadUserInfo}/>\n\t\t\t<Button\n\t\t\t\ttitle=\"Cerrar SesiÃ³n\"\n\t\t\t\tbuttonStyle={styles.btnCloseSession}\n\t\t\t\ttitleStyle={styles.btnCloseSessionText}\n\t\t\t\tonPress={() => firebase.auth().signOut()}\n\t\t\t/>\n\t\t\t<Toast ref={toastRef} position=\"center\" opacity={0.9} />\n\t\t\t<Loading text={loadingText} isVisible={loading} />\n\t\t</View>\n\t);\n}\n\nexport default UserLogged;\n\nconst styles = StyleSheet.create({\n\tviewUserInfo: {\n\t\tminHeight: '100%',\n\t\tbackgroundColor: '#f2f2f2'\n\t},\n\tbtnCloseSession: {\n\t\tmarginTop: 30,\n\t\tborderRadius: 10,\n\t\tbackgroundColor: '#FFF',\n\t\tborderTopColor: '#E3E3E3',\n\t\tborderBottomWidth: 1,\n\t\tborderBottomColor: '#E3E3E3',\n\t\tpaddingTop: 10,\n\t\tpaddingBottom: 10\n\t},\n\tbtnCloseSessionText: {\n\t\tcolor: '#1A89E7'\n\t}\n});\n"]},"metadata":{},"sourceType":"module"}