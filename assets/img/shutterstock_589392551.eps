%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: 15.eps
%%Creator: Adobe Illustrator(R) 16.0
%%For: Василий Торжинский
%%CreationDate: 2/28/2017
%%BoundingBox: 0 0 1000 1000
%%HiResBoundingBox: 0 0 1000 1000
%%CropBox: 0 0 1000 1000
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 16.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 16.0.0 x682 R agm 4.6676 ct 5.2591%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="п»ї" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.3-c011 66.145661, 2012/02/06-14:56:27        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">Basic RGB</rdf:li>
            </rdf:Alt>
         </dc:title>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xmp:CreatorTool>Adobe Illustrator CS6 (Windows)</xmp:CreatorTool>
         <xmp:CreateDate>2017-02-28T02:11:08+04:00</xmp:CreateDate>
         <xmp:ModifyDate>2017-02-28T02:11:09+04:00</xmp:ModifyDate>
         <xmp:MetadataDate>2017-02-28T02:11:09+04:00</xmp:MetadataDate>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>256</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEBLAEsAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABABLAAAAAEA&#xA;AQEsAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgBAAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A72BhQvAxVcBiq8DFVwGK&#xA;rwMVXAYq2Biq4DFWwMCt0xVumKt0xVumFXUwK6mKXUxV1MUNUwq6mBWqYq0RirRGFVpGKtEYqtIx&#xA;VaRiq0jFVhGKrCMVWkYqsIxVUAxVeBiq4DFV4GKrgMVXAYquAxVcBgVcBirYGFW6YFbpirdMUt0x&#xA;V1MVdTFXUxV1MVapirqYq1TFWqYoaIxVaRirRGKrSMKrSMVWkYqsIxVYRiqwjFVpGKrwMVXgYqvA&#xA;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</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#">
         <xmpMM:OriginalDocumentID>uuid:9E3E5C9A8C81DB118734DB58FDDE4BA7</xmpMM:OriginalDocumentID>
         <xmpMM:DocumentID>xmp.did:61973AA439FDE611A325F25301DE957B</xmpMM:DocumentID>
         <xmpMM:InstanceID>xmp.iid:61973AA439FDE611A325F25301DE957B</xmpMM:InstanceID>
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:be7b52e5-b3f7-084b-afd9-c4a7b8bb0acb</stRef:instanceID>
            <stRef:documentID>xmp.did:01801174072068118083917CE3B5B58A</stRef:documentID>
            <stRef:originalDocumentID>uuid:9E3E5C9A8C81DB118734DB58FDDE4BA7</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:61973AA439FDE611A325F25301DE957B</stEvt:instanceID>
                  <stEvt:when>2017-02-28T02:11:09+04:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/">
         <illustrator:StartupProfile>Basic RGB</illustrator:StartupProfile>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>1000.000000</stDim:w>
            <stDim:h>1000.000000</stDim:h>
            <stDim:unit>Pixels</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>White</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>255</xmpG:red>
                           <xmpG:green>255</xmpG:green>
                           <xmpG:blue>255</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>Black</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>0</xmpG:red>
                           <xmpG:green>0</xmpG:green>
                           <xmpG:blue>0</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Grays</xmpG:groupName>
                  <xmpG:groupType>1</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=0 G=0 B=0</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>0</xmpG:red>
                           <xmpG:green>0</xmpG:green>
                           <xmpG:blue>0</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <pdf:Producer>Adobe PDF library 10.01</pdf:Producer>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -1000 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 1000 li
1000 1000 li
1000 0 li
cp
clp
1000 1000 mo
0 1000 li
0 0 li
1000 0 li
1000 1000 li
cp
false sop
/0 
[/DeviceRGB] /CSA add_res
level3{
gsave
clp
[504 520 -520 504 493 485 ]ct
/0 
<<
/ShadingType 3 
/ColorSpace /0 /CSA get_res
/Coords [0 0 0 0 0 1 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/FunctionType 2
/C0 [1 1 1 ]
/C1 [.835294 .843137 .847059 ]
/N 1.97732 
>>
]
/Bounds []
/Encode [0 1 ]
>>
>>/Gradient add_res /0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[504 520 -520 504 493 485 ]ct
clp
/0 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 3 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~s8N#srr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2oqrVc]nrVc]nrVc]nrVc]mr;?Kjr;?Kj
r;?Kjqtp9fqtp9fqtp6dqYL'bqYL'bq>'j^q>'j^q"XXZq"XXZp\4FVp\4FUp@e4Rp@e1Pp%A"No^qeJ
o^qeIoCMSFo()ABo()>@naZ/=nF5r:nF,i7n*f]4mdBN1mHs<-m-O**lg*m&lK[["lKRQtl0.?pki_-l
kN:phk2k^djlGL`jQ#:\j5T(Xio/kTi8EPOhr!>KhVR,Fh;-oBgt^Z=gY1B8g=b04f\"j.f@SU)f%&=$
~>
<~s8N#srr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2orrVc]nrVc]nrVc]nrVc]nrVZTkr;?Kj
r;?Kjr;?Hhqtp9fqtp9fqYL'bqYL'bqYL$`q>'j^q>'j]q"XXZq"XXYp\4FVp\4CTp@e4Rp@\+Op%A"M
o^qeJo^qbHoCMSFo()ABo()>@naZ/=nF5r:n*f`6n*f]4mdBN1mHs<-m-O**lg*m&lg!d#lKRQtl07Eq
kih3mkND!ik2tdejlPRajQ,@]j5].Yio8qUiSi_Qi8EMMhqm5HhVI#Dgt^]?gY:K:g=k96g"G$1f[na,
~>
<~s8N#srr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2orrr)forVc]nrVc]nrVc]nrVZTkr;?Kj
r;?Kjr;?Hhqtp9fqtp9fqtg0cqYL'bqYL'aq>'j^q>'j^q"XXZq"XXZp\4FVp\4FUp@e4Rp@e1Pp%A"N
p%7nKo^qeIoCMSFoCMPDo()AAnaZ/>naQ&;nF5o8n*f`6mdBN2md9E/mHs9,m-O'(lg*m%lK[["l07Hs
kih6oki_-lkN:phk2k^djlGL`jQ#:\j5T(Xio/kTiS`YPhr!>KhVR,Gh;-oBgt^]>gY:H9g=k65g"=s0
~>
]
>>
0 0 0 0 0 1 [
]true true []
/DeviceRGB
RadialShade
} /Gradient add_res /0 /Gradient get_res exec grestore
}if
np
524.584 537.369 mo
375.024 537.369 227.927 579.156 99.1938 658.213 cv
96.689 659.754 95.144 662.543 95.1221 665.564 cv
95.1011 668.588 96.606 671.4 99.0889 672.975 cv
130.794 693.111 161.476 715.289 190.333 738.928 cv
191.836 777.279 195.458 815.596 201.104 852.877 cv
201.53 855.697 203.273 858.113 205.76 859.332 cv
206.882 859.879 208.091 860.152 209.296 860.152 cv
210.761 860.152 212.22 859.75 213.518 858.953 cv
307.653 801.143 415.219 770.584 524.582 770.584 cv
633.949 770.584 719.238 790.488 813.373 848.297 cv
814.672 849.094 816.133 849.498 817.596 849.498 cv
818.801 849.498 820.01 849.223 821.131 848.676 cv
823.619 847.459 825.363 845.043 825.791 842.221 cv
831.436 804.932 835.057 766.619 836.563 728.271 cv
865.418 704.633 896.096 682.459 927.805 662.318 cv
930.287 660.744 931.791 657.932 931.771 654.91 cv
931.75 651.887 930.203 649.098 927.697 647.559 cv
798.967 568.5 674.145 537.369 524.584 537.369 cv
524.584 537.369 li
cp
.964706 .596078 0 rgb
f
108.064 665.676 mo
140.021 686.162 170.922 708.693 199.964 732.689 cv
200.511 733.141 200.841 733.818 200.867 734.543 cv
202.211 772.541 205.66 810.539 211.123 847.541 cv
306.179 789.92 414.482 759.484 524.582 759.484 cv
634.686 759.484 720.715 779.264 815.771 836.887 cv
821.234 799.877 824.682 761.881 826.027 723.889 cv
826.053 723.162 826.383 722.484 826.93 722.033 cv
855.971 698.039 886.869 675.508 918.828 655.02 cv
792.559 578.328 670.902 548.469 524.584 548.469 cv
378.265 548.469 234.333 588.984 108.064 665.676 cv
cp
817.596 851.984 mo
815.684 851.984 813.805 851.449 812.156 850.439 cv
718.387 792.854 633.518 773.07 524.582 773.07 cv
415.649 773.07 308.506 803.508 214.737 861.094 cv
213.089 862.105 211.208 862.641 209.296 862.641 cv
207.736 862.641 206.162 862.273 204.743 861.584 cv
201.531 860.01 199.288 856.9 198.737 853.264 cv
193.136 816.277 189.52 778.232 187.985 740.174 cv
159.46 716.865 129.136 694.973 97.8394 675.096 cv
94.6587 673.078 92.6997 669.418 92.7275 665.547 cv
92.7554 661.676 94.7656 658.045 97.9731 656.074 cv
227.076 576.789 374.595 534.883 524.584 534.883 cv
674.574 534.883 799.818 566.133 928.916 645.418 cv
932.125 647.389 934.137 651.02 934.166 654.891 cv
934.191 658.764 932.234 662.424 929.053 664.441 cv
897.74 684.33 867.418 706.223 838.908 729.518 cv
837.375 767.572 833.758 805.617 828.156 842.607 cv
827.604 846.246 825.359 849.355 822.154 850.926 cv
820.73 851.619 819.156 851.984 817.596 851.984 cv
cp
.25098 .0901961 .0235294 rgb
f
550.715 486.935 mo
542.398 454.646 521.23 377.51 495.174 319.768 cv
502.9 325.652 509.678 330.125 515.367 333.042 cv
523.127 337.033 530.762 339.007 538.119 339.007 cv
552.393 339.007 565.615 331.577 576.633 317.014 cv
587.381 302.793 591.453 291.447 589.842 280.226 cv
587.713 265.399 575.234 250.231 549.381 231.048 cv
492.203 188.613 458.794 171.333 434.875 194.655 cv
423.202 206.04 418.694 216.861 420.901 228.702 cv
388.51 209.442 337.437 195.864 266.915 225.556 cv
238.985 237.313 216.613 253.26 200.269 272.998 cv
197.286 265.851 191.849 260.566 184.018 257.254 cv
159.306 246.8 138.58 256.877 120.652 288.057 cv
104.282 316.525 72.0708 380.731 71.7476 381.376 cv
71.707 381.458 71.6694 381.542 71.6348 381.626 cv
71.4155 382.162 50.2837 435.427 100.87 456.167 cv
110.925 460.289 120.044 462.355 128.146 462.355 cv
133.727 462.355 138.825 461.376 143.412 459.413 cv
158.371 453.023 164.193 438.198 167.672 429.337 cv
168.174 428.062 168.621 426.921 169.04 425.961 cv
170.286 423.11 171.536 419.891 172.717 416.659 cv
188.631 470.585 269.951 599.695 273.612 605.49 cv
273.872 605.902 363.973 694.773 363.973 694.773 cv
549.082 632.328 li
549.082 632.328 550.85 487.453 550.715 486.935 cv
cp
1 1 1 rgb
f
198.783 280.658 mo
218.507 256.829 224.942 252.238 251.42 236.195 cv
289.489 259.733 344.833 289.845 340.49 376.764 cv
322.249 464.597 256.549 487.838 199.539 469.583 cv
188.06 446.193 179.488 423.376 173.489 403.28 cv
173.489 403.28 166.749 437.286 147.899 452.779 cv
138.092 460.839 123.327 461.233 108.043 455.025 cv
39.0679 427.007 89.1753 354.963 89.1753 354.963 cv
89.1753 354.963 128.07 266.947 156.909 258.071 cv
191.951 250.439 198.783 280.658 198.783 280.658 cv
cp
1 .462745 .160784 rgb
f
276.649 608.408 mo
274.979 608.408 273.45 607.564 272.56 606.154 cv
269.167 600.781 190.872 476.496 172.609 420.496 cv
171.755 422.718 170.942 424.714 170.18 426.459 cv
169.784 427.364 169.365 428.433 168.896 429.623 cv
168.83 429.792 li
165.28 438.832 159.338 453.962 143.9 460.557 cv
139.184 462.575 133.884 463.599 128.146 463.599 cv
119.903 463.599 110.567 461.486 100.398 457.317 cv
48.6899 436.118 70.2603 381.703 70.4839 381.155 cv
70.5298 381.043 70.5806 380.929 70.6353 380.82 cv
70.9575 380.176 103.279 315.776 119.574 287.437 cv
133.274 263.61 148.447 252.028 165.96 252.028 cv
171.862 252.028 178.101 253.4 184.503 256.109 cv
191.936 259.252 197.336 264.152 200.583 270.691 cv
216.947 251.483 239.089 235.919 266.432 224.409 cv
293.848 212.866 320.438 207.015 345.465 207.015 cv
372.043 207.015 396.868 213.51 419.295 226.327 cv
418.086 215.098 422.811 204.684 434.006 193.765 cv
441.459 186.498 449.899 182.965 459.804 182.965 cv
482.183 182.965 510.953 200.98 550.121 230.05 cv
576.262 249.445 588.893 264.866 591.074 280.048 cv
592.734 291.625 588.588 303.257 577.625 317.763 cv
566.494 332.475 552.834 340.25 538.119 340.25 cv
530.52 340.25 522.672 338.197 514.799 334.148 cv
510.065 331.721 504.512 328.185 498.248 323.612 cv
523.637 381.333 544.15 456.467 551.92 486.625 cv
552.244 487.875 552.059 489.176 551.402 490.288 cv
550.746 491.4 549.695 492.189 548.445 492.511 cv
548.055 492.612 547.646 492.664 547.238 492.664 cv
545.033 492.664 543.111 491.173 542.561 489.037 cv
533.623 454.339 509.732 367.39 481.037 309.528 cv
481.031 309.524 480.98 309.428 480.934 309.332 cv
478.876 305.151 476.684 300.97 474.417 296.906 cv
473.789 295.779 473.636 294.474 473.989 293.233 cv
474.341 291.991 475.157 290.961 476.284 290.332 cv
477.003 289.931 477.817 289.719 478.636 289.719 cv
480.387 289.719 482.005 290.668 482.858 292.197 cv
485.01 296.06 487.123 300.078 489.141 304.141 cv
501.143 314.211 511.539 321.613 519.215 325.553 cv
525.838 328.958 532.262 330.686 538.307 330.686 cv
549.867 330.686 560.502 324.377 569.916 311.934 cv
579.197 299.652 582.773 290.241 581.506 281.419 cv
579.721 268.996 568.266 255.546 544.361 237.81 cv
506.881 209.993 479.714 192.754 460.117 192.754 cv
452.56 192.754 446.226 195.348 440.754 200.686 cv
426.021 215.053 427.431 225.185 431.299 233.972 cv
436.95 237.952 442.387 242.327 447.464 246.977 cv
449.428 248.776 449.561 251.839 447.762 253.802 cv
446.849 254.799 445.549 255.371 444.197 255.371 cv
442.986 255.371 441.828 254.921 440.935 254.104 cv
435.813 249.409 430.349 245.046 424.696 241.132 cv
424.65 241.102 424.58 241.051 424.512 240.998 cv
400.907 224.711 374.436 216.433 345.894 216.433 cv
322.264 216.433 296.791 222.113 270.181 233.316 cv
241.094 245.56 218.375 262.459 202.658 283.545 cv
190.149 300.311 181.899 319.895 178.136 341.755 cv
177.737 344.081 175.735 345.768 173.378 345.768 cv
173.105 345.768 172.827 345.745 172.549 345.695 cv
169.928 345.243 168.16 342.74 168.612 340.116 cv
172.495 317.562 180.894 297.208 193.576 279.611 cv
191.829 272.702 187.624 267.923 180.737 265.012 cv
175.417 262.761 170.544 261.667 165.839 261.667 cv
151.99 261.667 139.952 271.387 127.953 292.254 cv
111.975 320.041 80.666 382.38 79.3413 385.02 cv
78.8706 386.218 74.3857 397.966 75.4634 411.435 cv
76.8477 428.734 86.4702 441.162 104.063 448.375 cv
113.067 452.067 121.16 453.94 128.117 453.939 cv
132.547 453.939 136.579 453.175 140.103 451.669 cv
151.821 446.665 156.643 434.385 159.835 426.259 cv
160.379 424.871 160.869 423.629 161.324 422.587 cv
164.1 416.24 166.955 407.834 168.861 401.901 cv
168.878 401.839 168.915 401.744 168.954 401.649 cv
169.018 401.48 169.046 401.406 169.078 401.332 cv
169.176 401.116 169.285 400.918 169.404 400.727 cv
169.43 400.677 169.462 400.622 169.499 400.568 cv
169.661 400.332 169.84 400.113 170.039 399.91 cv
170.194 399.768 li
170.37 399.607 170.524 399.478 170.691 399.357 cv
170.749 399.316 170.813 399.275 170.879 399.232 cv
171.119 399.084 171.281 398.996 171.45 398.917 cv
171.574 398.859 171.662 398.819 171.754 398.786 cv
171.926 398.717 172.118 398.659 172.314 398.611 cv
172.429 398.578 172.498 398.56 172.569 398.545 cv
172.891 398.488 173.186 398.453 173.489 398.453 cv
173.799 398.453 174.116 398.484 174.43 398.547 cv
174.531 398.568 174.617 398.594 174.701 398.621 cv
174.957 398.689 175.149 398.744 175.333 398.823 cv
175.397 398.848 175.493 398.896 175.588 398.946 cv
175.79 399.045 175.958 399.13 176.117 399.235 cv
176.203 399.292 176.279 399.35 176.355 399.409 cv
176.555 399.563 176.685 399.665 176.805 399.778 cv
176.918 399.888 177 399.978 177.084 400.073 cv
177.19 400.19 177.301 400.322 177.403 400.462 cv
177.476 400.563 177.546 400.675 177.617 400.792 cv
177.702 400.931 177.785 401.082 177.858 401.24 cv
177.912 401.351 177.964 401.479 178.014 401.615 cv
178.069 401.764 178.123 401.934 178.166 402.111 cv
178.196 402.226 178.225 402.36 178.247 402.5 cv
178.262 402.553 178.278 402.631 178.289 402.711 cv
178.476 403.932 178.667 405.117 178.857 406.253 cv
186.397 451.154 279.79 599.502 280.732 600.994 cv
282.153 603.246 281.479 606.236 279.228 607.66 cv
278.453 608.148 277.562 608.408 276.649 608.408 cv
cp
.25098 .0901961 .0235294 rgb
f
433.361 520.588 mo
433.361 520.588 462.552 560.512 415.173 576.742 cv
371.497 591.705 363.973 546.156 363.973 546.156 cv
384.066 530.971 li
392.514 509.977 li
412.78 521.779 li
433.361 520.588 li
cp
.788235 0 0 rgb
f
402.159 514.793 mo
405.889 548.678 li
387.668 520.389 li
391.775 511.813 li
402.159 514.793 li
cp
.658824 0 0 rgb
f
367.737 547.568 mo
369.56 555.268 376.598 576.361 398.763 576.361 cv
403.438 576.361 408.587 575.408 414.072 573.525 cv
427.07 569.074 435.044 562.418 437.773 553.738 cv
441.569 541.672 434.482 528.652 431.613 524.092 cv
412.33 525.207 li
411.631 525.041 li
394.199 514.887 li
386.994 532.791 li
386.59 533.32 li
367.737 547.568 li
cp
398.766 583.156 mo
367.001 583.158 360.681 547.072 360.622 546.709 cv
360.41 545.424 li
360.887 544.23 li
381.266 528.826 li
390.292 506.398 li
392.071 505.787 li
413.605 518.33 li
434.335 517.129 li
435.411 517.637 li
436.103 518.582 li
436.67 519.359 449.909 537.795 444.253 555.777 cv
440.84 566.631 431.426 574.764 416.274 579.953 cv
410.079 582.078 404.188 583.156 398.766 583.156 cv
398.766 583.156 li
cp
.25098 .0901961 .0235294 rgb
f
792.742 339.295 mo
792.17 337.714 790.578 336.746 788.91 336.954 cv
761.9 340.411 735.602 351.847 720.576 362.081 cv
691.475 341.465 657.271 335.945 632.035 337.431 cv
622.391 322.146 601.822 300.628 577.33 286.724 cv
575.844 285.878 573.965 286.201 572.846 287.497 cv
547.797 316.422 525.105 372.968 512.221 416.241 cv
488.068 497.379 487.668 593.279 487.667 594.24 cv
487.664 596.221 489.27 597.832 491.251 597.834 cv
491.253 597.834 757.111 638.746 757.545 638.746 cv
758.98 638.746 760.336 637.877 760.889 636.455 cv
761.209 635.635 792.961 553.201 801.383 468.994 cv
805.453 428.286 803.336 368.642 792.742 339.295 cv
cp
1 .462745 .160784 rgb
f
351.737 553.281 mo
341.565 553.281 331.991 548.992 323.278 540.535 cv
322.353 539.637 321.832 538.43 321.814 537.139 cv
321.794 535.848 322.28 534.627 323.179 533.701 cv
324.094 532.756 325.326 532.234 326.646 532.234 cv
327.91 532.234 329.104 532.719 330.011 533.6 cv
336.904 540.293 344.198 543.686 351.689 543.686 cv
351.69 543.686 351.69 543.686 351.691 543.686 cv
357.424 543.686 363.413 541.701 369.492 537.787 cv
383.039 529.061 388.22 517.205 384.891 502.549 cv
382.378 494.984 380.292 490.592 379.912 489.916 cv
379.474 489.18 379.234 488.315 379.234 487.442 cv
379.234 484.777 381.402 482.609 384.066 482.609 cv
385.888 482.609 387.538 483.619 388.37 485.243 cv
389.304 486.934 391.586 492.105 393.993 499.316 cv
398.623 507.377 407.378 516.932 422.855 516.93 cv
425.858 516.93 429.052 516.572 432.348 515.865 cv
453.774 511.27 452.072 488.814 451.989 487.861 cv
451.877 486.575 452.273 485.323 453.104 484.335 cv
453.934 483.347 455.1 482.741 456.386 482.629 cv
456.528 482.614 456.683 482.607 456.837 482.607 cv
459.302 482.607 461.402 484.549 461.618 487.026 cv
462.575 498.043 458.112 520.223 434.375 525.314 cv
430.45 526.156 426.584 526.584 422.885 526.584 cv
412.257 526.584 402.72 522.977 395.135 516.121 cv
393.509 528.072 386.497 538.33 374.724 545.912 cv
367.126 550.803 359.392 553.281 351.737 553.281 cv
cp
.25098 .0901961 .0235294 rgb
f
384.081 491.062 mo
383.105 491.062 382.133 490.667 381.425 489.887 cv
380.824 489.225 380.477 488.336 380.477 487.442 cv
380.477 485.46 382.083 483.853 384.066 483.853 cv
385.498 483.853 386.734 484.692 387.309 485.905 cv
387.987 487.301 387.7 489.032 386.494 490.128 cv
385.806 490.754 384.942 491.062 384.081 491.062 cv
cp
1 1 1 rgb
f
668.314 553.482 mo
666.109 553.482 663.799 553.266 661.449 552.838 cv
646.045 550.041 639.547 539.025 636.844 529.248 cv
631.957 536.418 623.658 543.875 610.287 543.875 cv
609.52 543.875 608.74 543.852 607.943 543.799 cv
586.793 542.465 579.256 526.965 579.256 512.9 cv
579.256 510.236 581.422 508.068 584.088 508.068 cv
586.752 508.068 588.92 510.236 588.92 512.9 cv
588.92 518.918 590.834 533.037 608.555 534.154 cv
609.125 534.189 609.688 534.207 610.236 534.207 cv
629.139 534.205 634.318 513.154 635.455 506.703 cv
635.551 505.967 635.662 505.199 635.791 504.471 cv
635.811 504.365 635.84 504.262 635.873 504.16 cv
635.918 503.98 635.957 503.826 636.012 503.676 cv
636.064 503.527 636.135 503.379 636.207 503.227 cv
636.291 503.053 636.344 502.947 636.404 502.848 cv
636.504 502.68 636.607 502.535 636.719 502.391 cv
636.813 502.27 636.879 502.184 636.953 502.102 cv
637.084 501.955 637.225 501.822 637.373 501.693 cv
637.434 501.635 637.527 501.553 637.625 501.477 cv
637.781 501.357 637.953 501.25 638.131 501.146 cv
638.23 501.088 638.314 501.039 638.402 500.995 cv
638.586 500.902 638.785 500.824 638.988 500.754 cv
639.104 500.713 639.184 500.685 639.27 500.663 cv
639.479 500.605 639.695 500.565 639.916 500.539 cv
640.031 500.519 640.123 500.507 640.219 500.5 cv
640.303 500.496 640.389 500.493 640.477 500.493 cv
640.596 500.493 640.717 500.498 640.84 500.507 cv
641.037 500.507 li
641.213 500.534 li
641.262 500.535 641.338 500.543 641.414 500.558 cv
641.504 500.575 641.607 500.604 641.709 500.637 cv
641.934 500.698 642.055 500.732 642.172 500.773 cv
642.322 500.823 642.49 500.901 642.656 500.982 cv
642.828 501.066 642.924 501.113 643.016 501.166 cv
643.186 501.271 643.324 501.371 643.461 501.477 cv
643.598 501.578 643.693 501.652 643.785 501.738 cv
643.895 501.836 644.008 501.957 644.121 502.08 cv
644.236 502.209 644.326 502.309 644.406 502.418 cv
644.502 502.545 644.586 502.678 644.668 502.814 cv
644.771 502.986 644.834 503.092 644.887 503.203 cv
644.955 503.344 645.014 503.494 645.07 503.65 cv
645.123 503.791 645.172 503.926 645.211 504.07 cv
645.254 504.236 645.279 504.383 645.303 504.529 cv
645.334 504.727 645.355 504.869 645.363 505.021 cv
645.373 505.178 645.369 505.348 645.359 505.521 cv
645.365 505.627 645.365 505.73 645.354 505.84 cv
645.27 506.604 645.158 507.408 645.021 508.24 cv
644.189 515.502 643.018 539.666 663.176 543.328 cv
664.926 543.646 666.627 543.807 668.23 543.807 cv
668.232 543.807 li
683.023 543.807 686.926 530.168 687.084 529.588 cv
687.656 527.488 689.574 526.018 691.748 526.018 cv
692.168 526.018 692.59 526.074 692.996 526.184 cv
695.563 526.869 697.098 529.512 696.422 532.074 cv
694.328 540.025 686.051 553.48 668.314 553.482 cv
668.314 553.482 li
cp
.25098 .0901961 .0235294 rgb
f
647.758 466.042 mo
629.455 462.856 621.176 466.046 615.756 469.338 cv
608.879 473.519 609.936 481.631 614.617 488.118 cv
620.301 495.991 633.467 508.529 639.707 509.746 cv
647.061 511.18 657.025 505.688 667.18 499.388 cv
677.193 493.179 679.996 486.116 675.604 480.138 cv
672.045 475.293 663.963 468.861 647.758 466.042 cv
cp
f
427.448 433.917 mo
434.107 456.75 415.956 482.128 386.903 490.6 cv
357.855 499.073 328.907 487.432 322.249 464.597 cv
315.589 441.763 333.74 416.384 362.791 407.914 cv
391.84 399.441 420.789 411.085 427.448 433.917 cv
cp
f
372.604 430.389 mo
377.334 438.732 374.733 449.277 363.403 455.698 cv
352.072 462.12 341.174 459.965 336.444 451.622 cv
331.714 443.275 334.944 431.9 346.274 425.477 cv
357.607 419.056 367.874 422.045 372.604 430.389 cv
cp
1 1 1 rgb
f
795.801 518.783 mo
792.393 518.783 789.58 516.01 789.535 512.6 cv
789.514 510.926 790.145 509.342 791.313 508.143 cv
792.48 506.943 794.045 506.27 795.719 506.248 cv
811.961 506.035 li
815.455 506.035 818.266 508.809 818.311 512.219 cv
818.332 513.893 817.701 515.475 816.535 516.676 cv
815.367 517.875 813.801 518.549 812.127 518.57 cv
795.801 518.783 li
cp
.25098 .0901961 .0235294 rgb
f
818.76 546.639 mo
818.377 546.639 817.988 546.605 817.602 546.535 cv
791.494 541.74 li
789.848 541.438 788.418 540.514 787.467 539.137 cv
786.516 537.756 786.158 536.09 786.461 534.443 cv
787.008 531.471 789.6 529.313 792.627 529.313 cv
793.004 529.313 793.383 529.346 793.754 529.414 cv
819.859 534.205 li
821.504 534.506 822.932 535.43 823.883 536.809 cv
824.836 538.188 825.193 539.854 824.891 541.502 cv
824.352 544.438 821.797 546.6 818.814 546.639 cv
818.76 546.639 li
cp
f
798.758 569.516 mo
797.859 569.516 796.982 569.322 796.156 568.941 cv
782.627 562.715 li
779.486 561.268 778.107 557.537 779.555 554.396 cv
780.576 552.182 782.811 550.75 785.25 550.75 cv
786.158 550.75 787.037 550.943 787.867 551.326 cv
801.396 557.553 li
804.537 559 805.916 562.73 804.469 565.869 cv
803.463 568.057 801.258 569.486 798.854 569.514 cv
798.758 569.516 li
cp
f
502.9 461.896 mo
502.072 461.896 501.264 461.733 500.496 461.413 cv
486.497 455.599 li
484.952 454.959 483.748 453.754 483.108 452.207 cv
482.467 450.659 482.469 448.954 483.111 447.407 cv
484.086 445.059 486.359 443.541 488.901 443.541 cv
489.727 443.541 490.536 443.702 491.304 444.023 cv
505.307 449.835 li
508.498 451.164 510.016 454.84 508.689 458.031 cv
507.715 460.379 505.441 461.896 502.9 461.896 cv
cp
f
498.445 484.831 mo
498.037 484.831 497.629 484.791 497.234 484.71 cv
471.236 479.658 li
467.843 478.997 465.621 475.7 466.28 472.309 cv
466.85 469.369 469.434 467.235 472.424 467.235 cv
472.827 467.235 473.233 467.275 473.63 467.353 cv
499.636 472.408 li
501.279 472.728 502.7 473.667 503.637 475.057 cv
504.572 476.444 504.912 478.114 504.592 479.757 cv
504.021 482.697 501.436 484.831 498.445 484.831 cv
cp
f
482.649 508.352 mo
479.384 508.352 476.703 505.896 476.412 502.643 cv
476.104 499.203 478.653 496.15 482.095 495.84 cv
495.174 494.667 li
495.361 494.652 495.538 494.644 495.713 494.644 cv
498.993 494.644 501.684 497.098 501.977 500.353 cv
502.285 503.795 499.736 506.848 496.294 507.154 cv
483.214 508.326 li
483.022 508.344 482.835 508.352 482.649 508.352 cv
cp
f
402.233 367.111 mo
385.259 372.204 367.131 361.794 361.752 343.868 cv
360.793 340.689 360.31 337.484 360.253 334.33 cv
365.244 339.85 373.562 340.492 378.907 335.754 cv
384.271 330.985 384.603 322.577 379.619 316.973 cv
376.456 313.4 371.933 311.836 367.672 312.37 cv
371.493 307.651 376.643 304.05 382.779 302.204 cv
399.77 297.099 417.881 307.506 423.261 325.434 cv
428.642 343.358 419.222 362.006 402.233 367.111 cv
cp
f
290.875 416.356 mo
273.922 421.518 255.75 411.184 250.298 393.279 cv
249.325 390.104 248.83 386.9 248.76 383.749 cv
253.771 389.247 262.092 389.858 267.42 385.094 cv
272.764 380.303 273.063 371.895 268.054 366.312 cv
264.875 362.751 260.348 361.207 256.089 361.758 cv
259.892 357.026 265.027 353.401 271.153 351.531 cv
288.124 346.358 306.278 356.689 311.73 374.594 cv
317.183 392.497 307.84 411.184 290.875 416.356 cv
cp
f
711.277 467.421 mo
701.771 465.187 695.979 455.236 698.34 445.201 cv
698.758 443.42 699.406 441.758 700.246 440.235 cv
701.113 444.243 704.906 446.835 708.758 446.042 cv
712.629 445.243 715.098 441.321 714.262 437.272 cv
713.732 434.698 712.004 432.71 709.822 431.793 cv
712.943 430.59 716.391 430.288 719.828 431.092 cv
729.342 433.327 735.125 443.272 732.768 453.306 cv
730.41 463.341 720.787 469.653 711.277 467.421 cv
cp
f
590.855 444.352 mo
581.348 442.157 575.514 432.229 577.83 422.183 cv
578.238 420.401 578.883 418.736 579.719 417.211 cv
580.596 421.212 584.402 423.792 588.252 422.984 cv
592.121 422.166 594.576 418.235 593.719 414.191 cv
593.18 411.621 591.443 409.635 589.26 408.729 cv
592.375 407.516 595.822 407.199 599.262 407.986 cv
608.783 410.185 614.607 420.105 612.291 430.151 cv
609.973 440.194 600.377 446.543 590.855 444.352 cv
cp
f
629.182 339.626 mo
629.182 339.626 612.076 378.847 663.928 391.279 cv
716.479 403.876 720.867 366.236 720.867 366.236 cv
675.107 345.245 li
629.182 339.626 li
cp
1 1 1 rgb
f
757.545 639.99 mo
756.943 639.99 756.357 639.879 755.795 639.662 cv
753.311 638.695 752.074 635.891 753.041 633.406 cv
753.355 632.596 784.689 551.291 793.004 468.154 cv
796.691 431.286 795.482 376.227 786.063 345.868 cv
762.74 349.544 741.529 358.88 728.766 366.797 cv
730.07 367.87 731.215 368.847 732.295 369.811 cv
733.256 370.672 733.826 371.855 733.898 373.143 cv
733.973 374.432 733.539 375.671 732.68 376.633 cv
731.764 377.661 730.449 378.25 729.074 378.25 cv
727.883 378.25 726.74 377.813 725.855 377.021 cv
694.061 348.63 655.266 345.564 640.064 345.564 cv
630.449 345.564 621.459 346.623 614.061 348.625 cv
613.646 348.738 613.221 348.795 612.795 348.795 cv
610.619 348.795 608.703 347.327 608.133 345.226 cv
607.438 342.653 608.963 339.994 611.535 339.298 cv
614.623 338.463 618.043 337.769 621.725 337.228 cv
612.904 325.016 596.865 308.368 576.643 296.085 cv
553.428 324.909 532.348 378.152 520.291 418.643 cv
496.483 498.622 496.089 593.303 496.088 594.25 cv
496.084 596.912 493.917 599.078 491.256 599.078 cv
489.958 599.076 488.746 598.57 487.834 597.656 cv
486.923 596.742 486.422 595.527 486.424 594.236 cv
486.425 593.277 486.824 497.201 511.028 415.886 cv
523.951 372.489 546.729 315.757 571.904 286.683 cv
572.822 285.621 574.154 285.012 575.561 285.012 cv
576.393 285.012 577.219 285.231 577.945 285.644 cv
602.248 299.439 622.832 320.816 632.691 336.148 cv
635.049 336.023 637.465 335.96 639.881 335.96 cv
656.92 335.96 689.953 339.173 720.59 360.572 cv
734.547 351.255 760.445 339.343 788.752 335.72 cv
788.959 335.694 789.16 335.682 789.359 335.682 cv
791.391 335.682 793.221 336.964 793.91 338.872 cv
804.564 368.386 806.705 428.271 802.621 469.118 cv
794.17 553.613 762.369 636.082 762.047 636.906 cv
761.32 638.779 759.553 639.99 757.545 639.99 cv
cp
.25098 .0901961 .0235294 rgb
f
596.934 165.457 mo
596.934 165.457 604.146 162.744 614.027 167.597 cv
623.908 172.452 646.674 187.063 646.674 187.063 cv
753.838 226.67 li
753.838 226.67 794.689 230.007 797.857 239.072 cv
801.023 248.133 796.047 254.786 784.678 257.675 cv
773.311 260.565 774.914 268.387 773.145 274.675 cv
771.379 280.966 754.553 276.535 753.66 279.109 cv
752.768 281.684 746.492 289.734 739.287 288.018 cv
732.082 286.302 722.18 268.661 722.18 268.661 cv
639.268 234.837 li
639.268 234.837 603.197 251.238 607.742 226.488 cv
607.828 216.123 588.16 217.054 595.016 206.791 cv
601.691 196.796 603.771 197.84 596.107 180.732 cv
590.176 167.488 596.393 168.583 596.934 165.457 cv
cp
.964706 .596078 0 rgb
f
678.141 286.127 mo
675.006 285.735 671.959 284.94 669.088 283.763 cv
636.041 270.229 628.758 216.655 642.895 177.036 cv
654.451 144.651 683.473 136.225 706.781 139.142 cv
711.74 139.762 716.539 140.895 721.047 142.5 cv
734.955 147.463 747.299 157.22 754.914 169.266 cv
761.43 179.574 767.537 196.516 759.627 218.684 cv
747.111 253.767 709.605 290.065 678.141 286.127 cv
cp
.988235 .768627 .0901961 rgb
f
695.047 301.711 mo
693.471 301.711 691.902 301.565 690.512 301.291 cv
684.381 300.081 684.375 294.567 684.371 292.214 cv
684.367 289.694 684.826 283.58 684.846 283.321 cv
685.014 281.1 li
701.627 280.521 li
702.17 282.375 li
702.17 282.375 703.861 288.157 704.475 290.313 cv
705.813 295.03 704.764 298.826 701.666 300.468 cv
699.645 301.548 696.65 301.711 695.047 301.711 cv
695.047 301.711 li
cp
.25098 .0901961 .0235294 rgb
f
698.209 144.876 mo
687.029 144.876 659.834 148.216 648.799 179.144 cv
635.641 216.022 642.537 266.118 671.465 277.963 cv
673.814 278.927 676.32 279.581 678.918 279.907 cv
680.215 280.069 681.557 280.151 682.908 280.151 cv
710.459 280.155 743.018 246.589 753.723 216.576 cv
759.477 200.451 757.893 184.951 749.141 171.752 cv
742.303 161.439 731.014 152.712 718.941 148.405 cv
714.861 146.949 710.508 145.926 706.002 145.362 cv
703.426 145.041 700.803 144.876 698.209 144.876 cv
cp
682.924 287.664 mo
681.258 287.664 679.596 287.562 677.986 287.361 cv
674.736 286.954 671.584 286.13 668.617 284.913 cv
634.922 271.115 627.4 216.765 641.723 176.618 cv
654.367 141.185 685.393 137.36 698.146 137.36 cv
701.074 137.36 704.029 137.544 706.936 137.908 cv
711.971 138.538 716.857 139.689 721.465 141.329 cv
735.629 146.383 748.203 156.324 755.965 168.602 cv
762.629 179.143 768.877 196.461 760.799 219.102 cv
749.23 251.53 714.402 287.664 682.924 287.664 cv
cp
f
742.043 291.711 mo
741.484 291.701 740.93 291.661 740.398 291.594 cv
732.969 290.666 726.715 284.464 719.496 270.86 cv
718.527 269.031 719.227 266.751 721.053 265.78 cv
721.596 265.493 722.203 265.341 722.813 265.341 cv
724.207 265.341 725.479 266.107 726.133 267.339 cv
732.191 278.761 737.289 284.119 742.176 284.2 cv
742.313 284.201 li
744.055 284.201 744.426 283.752 745.723 281.224 cv
747.002 278.729 749.143 274.558 754.979 274.558 cv
756.146 274.558 757.428 274.729 758.787 275.066 cv
761.203 275.657 763.332 275.958 765.107 275.958 cv
767.053 275.958 768.498 275.595 769.291 274.908 cv
770.477 273.884 770.531 271.667 770.367 269.986 cv
769.328 259.296 773.992 257.46 781.055 254.679 cv
781.967 254.322 782.955 253.934 784.031 253.49 cv
791.43 250.45 795.818 246.804 795.773 243.741 cv
795.736 241.102 792.453 238.099 787.605 236.268 cv
772.406 230.523 754.367 230.345 753.607 230.34 cv
753.605 230.34 li
752.6 230.34 751.67 229.951 750.967 229.247 cv
750.252 228.533 749.859 227.586 749.863 226.582 cv
749.865 224.512 751.549 222.83 753.617 222.83 cv
754.438 222.83 773.48 222.902 790.26 229.24 cv
798.209 232.243 803.201 237.758 803.285 243.633 cv
803.352 248.193 800.561 254.812 786.889 260.438 cv
785.771 260.896 784.746 261.301 783.807 261.668 cv
777.352 264.209 777.352 264.209 777.844 269.263 cv
778.33 274.27 777.105 278.08 774.207 280.587 cv
771.998 282.498 768.93 283.465 765.082 283.465 cv
762.705 283.465 759.984 283.094 756.992 282.361 cv
756.145 282.152 755.482 282.05 754.969 282.05 cv
753.83 282.05 753.539 282.444 752.406 284.649 cv
751.051 287.292 748.781 291.714 742.293 291.714 cv
742.043 291.711 li
cp
f
617.686 243.935 mo
616.545 243.935 615.451 243.871 614.438 243.743 cv
611.283 243.349 608.711 242.327 606.799 240.705 cv
601.703 236.381 602.938 231.487 603.676 228.563 cv
604.416 225.629 604.512 225.252 601.744 223.811 cv
594.588 220.084 590.633 215.812 589.99 211.113 cv
589.469 207.317 591.066 203.648 594.736 200.208 cv
598.441 196.738 598.441 196.738 595.273 190.575 cv
594.811 189.677 594.307 188.692 593.77 187.607 cv
587.215 174.353 589.492 167.537 592.555 164.153 cv
594.883 161.588 598.523 160.175 602.809 160.175 cv
605.672 160.175 608.711 160.774 611.842 161.955 cv
629.881 168.757 644.514 181.375 645.129 181.908 cv
646.688 183.271 646.85 185.648 645.494 187.207 cv
644.779 188.025 643.748 188.494 642.66 188.494 cv
641.756 188.494 640.879 188.167 640.197 187.574 cv
640.051 187.447 625.887 175.279 609.189 168.983 cv
606.912 168.124 604.689 167.67 602.758 167.67 cv
600.662 167.67 599.016 168.211 598.121 169.198 cv
596.066 171.468 596.955 177.106 600.502 184.279 cv
601.008 185.295 601.482 186.222 601.918 187.075 cv
605.422 193.888 607.713 198.346 599.871 205.691 cv
598.639 206.842 597.219 208.54 597.432 210.094 cv
597.709 212.118 600.619 214.757 605.215 217.151 cv
613.246 221.336 611.758 227.232 610.959 230.399 cv
610.258 233.186 610.246 233.777 611.658 234.976 cv
612.787 235.937 614.846 236.443 617.607 236.443 cv
622.803 236.443 630.072 234.729 638.635 231.489 cv
639.063 231.328 639.508 231.247 639.961 231.247 cv
641.514 231.247 642.928 232.222 643.477 233.674 cv
643.832 234.614 643.801 235.635 643.387 236.55 cv
642.973 237.464 642.229 238.161 641.291 238.513 cv
631.793 242.111 623.85 243.935 617.686 243.935 cv
cp
f
644.451 281.674 mo
643.17 281.674 641.871 281.296 640.586 280.551 cv
637.512 278.759 633.832 275.441 632.75 272.563 cv
631.516 269.291 633.232 265.748 637.346 263.087 cv
639.238 261.87 644.326 258.647 644.326 258.647 cv
645.957 257.613 li
658.047 269.019 li
656.707 270.796 li
656.551 271.004 652.861 275.899 651.193 277.791 cv
649.912 279.243 647.768 281.674 644.451 281.674 cv
cp
f
691.619 195.081 mo
689.828 199.843 684.52 202.242 679.756 200.453 cv
675.006 198.649 672.594 193.34 674.396 188.578 cv
674.807 187.482 675.404 186.526 676.139 185.705 cv
676.697 186.924 677.941 187.769 679.371 187.769 cv
681.334 187.769 682.928 186.177 682.928 184.212 cv
682.928 183.654 682.789 183.106 682.555 182.634 cv
683.773 182.572 685.041 182.758 686.26 183.218 cv
691.01 185.009 693.422 190.318 691.619 195.081 cv
cp
f
727.131 208.584 mo
725.342 213.333 720.02 215.747 715.27 213.956 cv
710.508 212.153 708.107 206.843 709.898 202.081 cv
710.32 200.962 710.941 199.98 711.688 199.147 cv
712.248 200.377 713.49 201.236 714.934 201.236 cv
716.898 201.236 718.49 199.644 718.49 197.679 cv
718.49 197.132 718.365 196.597 718.141 196.138 cv
719.336 196.088 720.566 196.274 721.76 196.722 cv
726.521 198.512 728.922 203.822 727.131 208.584 cv
cp
f
671.836 219.819 mo
694.217 223.807 li
711.367 236.563 li
711.367 236.563 684.566 258.893 680.77 257.569 cv
676.969 256.246 671.836 219.819 671.836 219.819 cv
cp
1 .462745 .160784 rgb
f
713.66 244.15 mo
712.633 244.021 711.711 243.336 711.324 242.299 cv
711.184 241.938 707.584 232.956 694.07 226.872 cv
680.246 220.656 667.684 223.984 667.559 224.02 cv
666.027 224.438 664.449 223.54 664.029 222.01 cv
663.611 220.482 664.51 218.901 666.039 218.482 cv
666.633 218.322 680.74 214.581 696.426 221.638 cv
712.264 228.765 716.533 239.832 716.707 240.297 cv
717.258 241.787 716.504 243.436 715.016 243.99 cv
714.568 244.16 714.104 244.205 713.66 244.15 cv
cp
.25098 .0901961 .0235294 rgb
f
680.818 259.756 mo
680.594 259.729 680.385 259.678 680.186 259.615 cv
674.229 257.628 671.186 235.3 669.9 222.171 cv
669.785 220.987 670.652 219.932 671.836 219.819 cv
673.018 219.698 674.072 220.567 674.188 221.752 cv
675.846 238.694 679.242 254.171 681.604 255.55 cv
681.619 255.556 681.637 255.558 681.652 255.56 cv
684.631 255.934 698.467 245.301 709.557 235.044 cv
710.43 234.233 711.795 234.286 712.6 235.163 cv
713.408 236.034 713.355 237.397 712.482 238.205 cv
705.047 245.084 687.457 260.586 680.818 259.756 cv
cp
f
513.861 597.982 mo
462.96 597.982 411.84 602.994 361.92 612.875 cv
311.53 622.848 261.905 637.877 214.422 657.545 cv
212.311 658.422 210.634 660.098 209.761 662.205 cv
208.886 664.318 208.886 666.689 209.761 668.797 cv
282.068 843.363 li
282.941 845.473 284.618 847.152 286.73 848.025 cv
287.785 848.461 288.905 848.68 290.025 848.68 cv
291.146 848.68 292.266 848.461 293.321 848.025 cv
363.596 818.916 437.796 804.156 513.861 804.156 cv
589.926 804.156 664.125 818.916 734.4 848.025 cv
735.455 848.461 736.576 848.68 737.697 848.68 cv
738.816 848.68 739.938 848.461 740.994 848.025 cv
743.104 847.152 744.781 845.473 745.654 843.363 cv
817.961 668.797 li
818.836 666.689 818.836 664.318 817.961 662.205 cv
817.088 660.098 815.41 658.422 813.299 657.545 cv
765.816 637.877 716.193 622.848 665.801 612.875 cv
615.883 602.994 564.762 597.982 513.861 597.982 cv
513.861 597.982 li
cp
.988235 .768627 .0901961 rgb
f
513.861 793.057 mo
590.566 793.057 665.404 807.779 736.348 836.822 cv
806.754 666.852 li
713.371 628.516 614.848 609.084 513.861 609.084 cv
412.875 609.084 314.352 628.516 220.969 666.852 cv
291.374 836.822 li
362.317 807.779 437.156 793.057 513.861 793.057 cv
cp
737.697 851.168 mo
736.232 851.168 734.805 850.883 733.449 850.322 cv
663.48 821.34 589.6 806.645 513.861 806.645 cv
438.124 806.645 364.243 821.34 294.272 850.322 cv
292.919 850.883 291.49 851.168 290.025 851.168 cv
288.561 851.168 287.132 850.883 285.778 850.322 cv
283.082 849.209 280.891 847.02 279.771 844.316 cv
207.464 669.75 li
206.329 667.014 206.329 663.996 207.464 661.254 cv
208.597 658.518 210.73 656.385 213.47 655.248 cv
261.109 635.516 310.893 620.438 361.438 610.434 cv
411.516 600.521 462.799 595.496 513.861 595.496 cv
564.924 595.496 616.205 600.521 666.285 610.434 cv
716.83 620.438 766.613 635.516 814.252 655.248 cv
816.99 656.385 819.125 658.518 820.258 661.254 cv
821.395 663.996 821.395 667.014 820.258 669.75 cv
747.951 844.316 li
746.832 847.02 744.641 849.209 741.941 850.324 cv
740.59 850.883 739.16 851.168 737.697 851.168 cv
cp
.25098 .0901961 .0235294 rgb
f
319.537 730.68 mo
325.65 728.912 li
328.62 728.053 329.508 726.787 329.917 725.908 cv
330.651 724.332 330.562 721.939 329.652 718.795 cv
325.296 703.736 li
323.924 698.996 322.037 696.881 319.175 696.881 cv
318.388 696.881 317.518 697.023 316.511 697.314 cv
310.396 699.082 li
319.537 730.68 li
cp
319.986 789.4 mo
319.362 789.4 318.742 789.244 318.186 788.938 cv
317.32 788.459 316.679 787.656 316.403 786.707 cv
288.745 691.1 li
288.47 690.148 288.583 689.127 289.062 688.262 cv
289.539 687.395 290.342 686.754 291.292 686.479 cv
311.669 680.584 li
314.931 679.641 318.029 679.162 320.877 679.162 cv
331.927 679.162 339.516 686.031 343.435 699.576 cv
347.209 712.627 li
349.632 721 349.472 728.061 346.735 733.607 cv
343.932 739.287 338.467 743.336 330.491 745.643 cv
324.377 747.41 li
334.251 781.543 li
334.824 783.523 333.684 785.59 331.704 786.164 cv
321.023 789.254 li
320.684 789.352 320.335 789.4 319.986 789.4 cv
cp
f
374.825 774.41 mo
374.087 774.41 373.361 774.191 372.74 773.771 cv
371.919 773.219 371.352 772.363 371.164 771.393 cv
352.15 673.697 li
351.757 671.676 353.077 669.717 355.1 669.322 cv
393.298 661.889 li
393.535 661.842 393.773 661.818 394.011 661.818 cv
394.749 661.818 395.476 662.037 396.096 662.457 cv
396.917 663.008 397.484 663.865 397.673 664.836 cv
399.574 674.609 li
399.968 676.631 398.647 678.59 396.625 678.982 cv
373.002 683.582 li
378.088 709.713 li
396.112 706.205 li
396.348 706.16 396.586 706.137 396.824 706.137 cv
397.562 706.137 398.289 706.355 398.91 706.773 cv
399.729 707.326 400.296 708.184 400.486 709.154 cv
402.387 718.928 li
402.576 719.9 402.372 720.906 401.818 721.727 cv
401.265 722.547 400.409 723.113 399.438 723.303 cv
381.415 726.809 li
386.787 754.406 li
410.41 749.811 li
410.65 749.762 410.891 749.74 411.126 749.74 cv
412.876 749.74 414.438 750.977 414.785 752.758 cv
416.687 762.531 li
416.875 763.502 416.671 764.51 416.119 765.328 cv
415.565 766.15 414.708 766.717 413.738 766.904 cv
375.538 774.34 li
375.301 774.387 375.063 774.41 374.825 774.41 cv
cp
f
440.748 763.441 mo
438.866 763.441 437.248 762.021 437.043 760.109 cv
427.912 674.75 li
414.89 676.143 li
414.755 676.156 414.621 676.164 414.489 676.164 cv
412.607 676.164 410.989 674.744 410.784 672.83 cv
409.725 662.932 li
409.62 661.947 409.91 660.961 410.53 660.191 cv
411.152 659.422 412.054 658.93 413.038 658.824 cv
457.558 654.064 li
457.692 654.051 457.826 654.043 457.958 654.043 cv
459.84 654.043 461.458 655.463 461.663 657.377 cv
462.722 667.277 li
462.828 668.26 462.537 669.246 461.917 670.016 cv
461.295 670.787 460.394 671.277 459.41 671.383 cv
446.388 672.777 li
455.52 758.133 li
455.625 759.117 455.335 760.102 454.713 760.873 cv
454.092 761.643 453.191 762.135 452.207 762.24 cv
441.149 763.422 li
441.014 763.434 440.88 763.441 440.748 763.441 cv
cp
f
522.852 760.516 mo
506.786 760.256 497.75 750.078 498.031 732.592 cv
498.095 728.66 li
498.128 726.621 499.792 724.99 501.824 724.99 cv
501.844 724.99 512.127 725.154 512.127 725.154 cv
513.117 725.17 514.059 725.578 514.748 726.289 cv
515.436 727 515.813 727.955 515.797 728.943 cv
515.717 733.92 li
515.59 741.768 519.16 742.887 522.67 742.945 cv
522.916 742.947 li
526.287 742.947 529.783 741.902 529.908 734.152 cv
530.059 724.826 523.941 718.928 516.859 712.096 cv
508.522 704.059 499.079 694.951 499.347 678.26 cv
499.63 660.771 508.423 651.141 524.105 651.141 cv
524.707 651.146 li
540.588 651.404 549.516 661.582 549.234 679.068 cv
549.223 679.865 li
549.207 680.854 548.797 681.797 548.086 682.484 cv
547.391 683.158 546.459 683.535 545.492 683.535 cv
545.473 683.535 535.189 683.369 535.189 683.369 cv
533.131 683.334 531.488 681.639 531.521 679.578 cv
531.551 677.736 li
531.68 669.758 528.258 668.625 524.893 668.568 cv
524.68 668.568 li
521.619 668.568 518.072 669.584 517.943 677.514 cv
517.793 686.844 523.912 692.742 530.994 699.572 cv
539.328 707.609 548.773 716.715 548.504 733.408 cv
548.223 750.891 539.33 760.52 523.465 760.52 cv
523.455 760.52 522.852 760.516 522.852 760.516 cv
cp
f
605.141 765.42 mo
605.006 765.42 604.871 765.412 604.734 765.398 cv
593.389 764.17 li
592.404 764.063 591.504 763.568 590.883 762.799 cv
590.264 762.027 589.975 761.043 590.08 760.059 cv
594.508 719.238 li
578.797 717.533 li
574.371 758.354 li
574.162 760.266 572.547 761.682 570.666 761.682 cv
570.531 761.682 570.396 761.676 570.26 761.66 cv
559.203 760.461 li
558.221 760.355 557.318 759.861 556.699 759.092 cv
556.078 758.32 555.789 757.336 555.896 756.352 cv
566.629 657.4 li
566.836 655.49 568.455 654.072 570.334 654.072 cv
570.467 654.072 570.604 654.08 570.74 654.094 cv
581.797 655.291 li
582.781 655.398 583.682 655.893 584.303 656.662 cv
584.922 657.432 585.211 658.418 585.104 659.402 cv
580.676 700.221 li
596.387 701.926 li
600.814 661.105 li
601.021 659.193 602.639 657.775 604.52 657.775 cv
604.652 657.775 604.789 657.783 604.924 657.799 cv
616.273 659.027 li
617.256 659.135 618.158 659.629 618.777 660.398 cv
619.396 661.17 619.686 662.154 619.578 663.139 cv
608.846 762.092 li
608.637 764.002 607.021 765.42 605.141 765.42 cv
cp
f
658.717 683.369 mo
657.434 683.369 653.529 683.369 651.938 691.014 cv
640.402 746.256 li
639.725 749.5 639.869 751.91 640.844 753.631 cv
641.697 755.133 643.219 756.096 645.498 756.57 cv
646.213 756.721 646.891 756.795 647.512 756.795 cv
648.795 756.795 652.701 756.795 654.297 749.154 cv
665.83 693.912 li
666.508 690.67 666.363 688.256 665.387 686.537 cv
664.535 685.033 663.014 684.072 660.734 683.596 cv
660.016 683.447 659.336 683.369 658.717 683.369 cv
cp
648.861 774.377 mo
646.666 774.377 644.338 774.123 641.938 773.621 cv
633.916 771.947 628.139 768.242 624.768 762.613 cv
621.439 757.053 620.652 749.928 622.426 741.436 cv
633.531 688.236 li
636.555 673.762 645.021 665.791 657.371 665.791 cv
659.564 665.791 661.895 666.045 664.293 666.545 cv
673.537 668.475 679.75 673.008 682.762 680.018 cv
684.973 685.164 685.324 691.461 683.807 698.732 cv
672.699 751.93 li
669.678 766.404 661.211 774.377 648.861 774.377 cv
cp
f
716.1 733.104 mo
717.146 733.424 718.053 733.58 718.869 733.582 cv
721.666 733.582 723.557 731.5 724.994 726.832 cv
729.604 711.852 li
731.938 704.256 728.99 702.654 725.771 701.664 cv
719.688 699.791 li
710.016 731.232 li
716.1 733.104 li
cp
690.881 784.471 mo
690.514 784.471 690.143 784.416 689.785 784.307 cv
679.156 781.035 li
677.188 780.43 676.084 778.342 676.689 776.373 cv
705.953 681.25 li
706.447 679.646 707.924 678.615 709.518 678.615 cv
709.881 678.615 710.25 678.668 710.615 678.781 cv
730.893 685.018 li
741.896 688.402 753.631 696.93 747.055 718.313 cv
743.059 731.297 li
737.967 747.854 728.031 751.33 720.594 751.33 cv
717.627 751.33 714.393 750.797 710.979 749.746 cv
704.895 747.877 li
694.447 781.838 li
694.156 782.783 693.502 783.574 692.627 784.037 cv
692.086 784.324 691.484 784.471 690.881 784.471 cv
cp
f
750.064 600.17 mo
720.926 590.48 693.064 595.963 679.076 614.135 cv
673.727 621.094 671.486 628.611 672.6 635.873 cv
673.588 642.318 677.219 648.027 682.82 651.953 cv
687.344 655.111 693.031 656.404 699.465 655.836 cv
698.49 663.574 700.443 674.918 716.977 681.969 cv
722.063 684.137 726.723 685.059 730.914 685.059 cv
739.439 685.059 746.018 681.246 750.303 676.348 cv
754.229 679.842 759.703 681.816 765.627 681.816 cv
766.863 681.816 768.121 681.732 769.387 681.557 cv
779.623 680.133 787.789 673.199 790.697 663.461 cv
798.172 638.504 779.943 610.111 750.064 600.17 cv
cp
1 .462745 .160784 rgb
f
706.23 641.809 mo
707.02 641.809 707.805 642.006 708.504 642.381 cv
710.852 643.639 711.74 646.572 710.484 648.922 cv
709.764 650.268 709.166 651.639 708.709 653.004 cv
705.5 662.594 709.285 669.535 720.279 674.223 cv
724.01 675.813 727.578 676.619 730.891 676.619 cv
737.277 676.619 742.74 673.537 745.879 668.164 cv
747.027 666.199 747.688 664.111 747.688 662.432 cv
747.688 659.768 749.855 657.6 752.52 657.6 cv
755.186 657.6 757.352 659.768 757.352 662.432 cv
757.352 664.814 756.801 667.396 755.752 669.943 cv
758.127 672.148 761.662 673.398 765.59 673.398 cv
766.459 673.398 767.346 673.338 768.227 673.215 cv
775.264 672.236 780.646 667.689 782.629 661.047 cv
788.707 640.756 772.576 616.537 747.406 608.16 cv
739.031 605.375 730.668 603.963 722.549 603.963 cv
706.652 603.963 693.24 609.543 685.75 619.271 cv
681.836 624.363 680.166 629.662 680.924 634.596 cv
681.559 638.746 683.947 642.461 687.648 645.051 cv
690.041 646.721 693.051 647.568 696.596 647.568 cv
697.869 647.568 699.215 647.459 700.602 647.24 cv
701.055 646.168 701.494 645.24 701.965 644.361 cv
702.809 642.787 704.443 641.809 706.23 641.809 cv
cp
730.914 686.303 mo
726.311 686.303 721.457 685.229 716.488 683.113 cv
700.436 676.266 697.473 665.51 698.082 657.174 cv
697.574 657.199 697.068 657.209 696.572 657.209 cv
690.998 657.209 686.133 655.783 682.109 652.971 cv
676.225 648.85 672.41 642.844 671.371 636.061 cv
670.205 628.455 672.527 620.611 678.09 613.377 cv
687.611 601.01 703.289 594.201 722.236 594.201 cv
731.406 594.201 740.9 595.813 750.457 598.99 cv
780.967 609.141 799.555 638.225 791.889 663.818 cv
788.84 674.027 780.283 681.297 769.559 682.789 cv
768.262 682.969 766.939 683.061 765.627 683.061 cv
759.859 683.061 754.508 681.295 750.416 678.064 cv
745.33 683.387 738.453 686.303 730.914 686.303 cv
cp
.25098 .0901961 .0235294 rgb
f
345.883 596.623 mo
330.891 578.496 302.119 573.879 272.58 584.861 cv
242.297 596.127 224.621 625.889 233.176 651.205 cv
236.501 661.066 245.106 667.869 255.632 668.959 cv
256.606 669.061 257.572 669.111 258.528 669.111 cv
265 669.111 270.942 666.832 275.042 662.879 cv
279.425 667.582 285.964 671.188 294.252 671.188 cv
298.809 671.188 303.892 670.102 309.43 667.508 cv
326.185 659.66 327.708 647.904 326.398 640.02 cv
333.057 640.396 338.875 638.875 343.416 635.457 cv
349.007 631.244 352.516 625.271 353.296 618.646 cv
354.177 611.174 351.613 603.559 345.883 596.623 cv
cp
1 1 1 rgb
f
272.24 643.979 mo
274.868 643.979 276.998 646.025 277.088 648.639 cv
277.15 650.389 277.909 652.533 279.171 654.523 cv
282.474 659.754 287.973 662.75 294.259 662.75 cv
297.89 662.75 301.792 661.785 305.86 659.883 cv
317.058 654.637 320.716 647.314 317.044 637.498 cv
316.527 636.115 315.861 634.721 315.067 633.355 cv
314.419 632.242 314.242 630.939 314.571 629.691 cv
314.901 628.443 315.696 627.4 316.811 626.748 cv
317.55 626.318 318.39 626.094 319.24 626.094 cv
320.957 626.094 322.557 627.012 323.419 628.494 cv
323.939 629.387 324.433 630.344 324.951 631.461 cv
326.12 631.605 327.26 631.678 328.349 631.678 cv
332.386 631.678 335.75 630.688 338.35 628.73 cv
342.085 625.914 344.424 621.982 344.933 617.66 cv
345.538 612.527 343.622 607.107 339.392 601.986 cv
331.667 592.645 318.873 587.5 303.369 587.5 cv
294.393 587.5 284.762 589.316 275.514 592.756 cv
249.896 602.285 234.162 627.816 241.155 648.512 cv
243.448 655.313 249.185 659.826 256.5 660.584 cv
257.182 660.654 257.871 660.691 258.547 660.691 cv
262.948 660.691 266.842 659.232 269.369 656.664 cv
268.185 654.074 267.516 651.434 267.431 648.977 cv
267.385 647.688 267.845 646.457 268.725 645.514 cv
269.606 644.568 270.801 644.023 272.091 643.98 cv
272.24 643.979 li
cp
294.252 672.432 mo
286.923 672.432 280.129 669.662 274.988 664.605 cv
270.699 668.273 264.775 670.354 258.528 670.354 cv
257.529 670.354 256.512 670.301 255.504 670.197 cv
244.487 669.057 235.48 661.93 231.999 651.604 cv
223.23 625.656 241.241 595.193 272.146 583.695 cv
282.803 579.734 293.398 577.725 303.636 577.725 cv
321.841 577.725 337.185 584.154 346.841 595.83 cv
352.793 603.035 355.452 610.975 354.531 618.793 cv
353.711 625.76 350.029 632.031 344.164 636.451 cv
339.872 639.682 334.553 641.318 328.358 641.318 cv
328.358 641.318 328.01 641.318 327.835 641.314 cv
328.807 649.857 326.206 661.023 309.958 668.633 cv
304.577 671.154 299.292 672.432 294.252 672.432 cv
cp
.25098 .0901961 .0235294 rgb
f
637.883 476.868 mo
638.07 480.851 634.164 484.819 629.162 485.353 cv
624.16 485.888 619.955 482.957 619.77 478.806 cv
619.584 474.653 623.488 470.853 628.49 470.318 cv
633.492 469.784 637.695 472.885 637.883 476.868 cv
cp
1 1 1 rgb
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
[/Gradient [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 16.0.0
%%For: (\702\740\761\750\753\750\751 \722\756\760\746\750\755\761\752\750\751) ()
%%Title: (15.eps)
%%CreationDate: 2/28/2017 2:11 AM
%%Canvassize: 16383
%AI9_DataStream
%Gb",KBj4Nhde<RKYH.[jS5Di4o)P_"6kfb)`>M%KJOh+Df^8M(r:[VfWjR%o+HT=,Sg9gG:3T':c)^!,<Om<,fBP;q[H:&`p%NK!
%9;Qc*do-)smE\#bh0WJ_%D$'''O$cN,A?do3iu$$mH.XG<i<R"b5X"O;d8>sqP9X-+4TVY^J_Ug\T1/fZ5`LGWE'O%X\PYH90!lL
%J`\,"Iab-"1]Vu;\9ka5+OFHAld7J$Cn>ip4Vs_'9>f)ma5,[Lf'RV&]iqK4q&u2=2]N]]05-^6!ubu9V:3`lI@)Jea5qc`-Zc-h
%Xm"Bn_\@i-9Pq6>l#JG4-IV][;a9i>mR;Zq-`uG/K4YpL_s^(;9Na-sc;"C](t-4I;O1$!)leO>@0/\0G`au%rLhQ@Q[8a?QE=j=
%4-c-3`;^)^diEBp6h`C6lhdZgYB_!epYD)"EH>L5BU3Bs\EVpA/bj*AofOX(K9!OiCo=aDq[Zt;KHKK3h0qNN]P5rCFES/3I(>6=
%<]-gSqnW9/HC=4\[T3=9C9_.6S-1uAa]?*9b?.Mbd4DKtNQq%?!2ufr8[dA>F2.C6Q^ZK2f;;P.DG&(hoUG:'.7^:gFa+gc%Tmpb
%<uI$V5qk\d\;OSF+`uN-e4sc'A_LfI*A55m>jp1B"%79kPUHLjD.L<35CWBg=tT-Tf*e&+no`tH^D0+]/[Mj?WJf#9^=C"VFRa"(
%OM+5-:iDo':BuC=B/E#kXnKV^_cJGT:hsOu5Q>sST6Z2Rofdf6hJ)Z;)pREoT78D&X0&->oerc@=rk3,C23Y0)u]:\[D:jjg@(7V
%1^<n![E4YKm>#0Ugo6X0j\C[tTY:K_XSnefb-\15oV51dYU%+!#no68oG2,Fq'2iIg;*b16-@GelCcpH-Q/HBV@so$s.oZ9j1gHE
%9W6F;6fK,+RreJAU-\.@6rT@tVo38$B!iS;/q9HS=TKieEpmZ$W)^$D)ps1U8G%8Geb+MhF1WmEm.@ofWVoku4u`g^TKX:LAu@#)
%VIl!inYccX_s&1(?`r!r-_5;TZrS&%reSmqM(\%^#`C0[lD%r2r[=6%@ZP5l-Ua\<[78C/'!f6Wc/)gh?KIDrhbg<,W<HdF&_DA7
%CQcJ-mIb8.?uTJT7N3g\C@AOb"rJpbZ'L#^m6_KtE<2.rs7qGAau/2\@_G^Cek!M+V\\,GS)jiorY#H-kroP5'$NsAY57<'+927K
%p!5k0V#SooO24%-s&eo'7m@L^OOVfcc(cAQI^8lINdgQk;p^D*ObU[O%,I^$MgfKueNNd!orOb6o6Pue.I&4J6oPOl1e=T#Cr7u@
%jJUU6nYh`=dHZ^1#;i0Wp>O@_/p>&q549\nG*(`)?k4R]n3.8g'C<T0I5nkU;A=@/\UV8$D<S(]-Q]GC3k&][G3XO`>'8u??<s\c
%;EqHr?V[1nSAXU_MD\^^l/M`#6U(bIP?0t/rlO_l:Hop#\Feh.&#li\]4B<M8O!FXkVu'RW`Uh!:VN3kT5;n.HM$55SYBDskf54m
%7D5YiAApm/O>#Z%fn*T#rqrPL(7]ss*cp<U(PYt<l'cn:kLZf->B=,QfiMsT<L^6nA'Jc=Zsm3__7a<sV(5VpnW`un.sB4?=hisd
%c`c$3\7SpL3bqp(Q+D1,lS.LPRd=c,bLH##JYDZV%RY<5plYu$d'#>H)H"+T.,*bi"25TB[B[lYY/uHGDqE*'mD6Yb*;uI4VSCu)
%D8%4SKmtc*.^2@aSY'CU>"L=Dh5E9s__d4(:@5";$V3clU5%>rVgQ3Qjg8'lG(M'M0N*rjLsJO4ia9Bki:cg%!q#^<_pm^0)ROcF
%guq8=hH-iYW`=DDQS\e/k>nqieS]*$2ffne:/6-BFqZd(e95#31rXhjj7d`@LrL3OJdi3tT%#C!)i**mqm:aLO5F9GRUB311o\_F
%_7uTKp@*.7[r<33`jbG]oZOae:)d!qofGZl13"h\plgeG@h0e&HnncldHpC-3@]6*;CD7rVk#3Od<"\&[5hapcC4^OG,8:>&L:eB
%n]$dH;mWm`X-%rlIVW5,#B+FA]a_B@eE0#&j#>Nq])?pf.31<?aD<J5Z[UGna33:HIiQpnXnh7GTAiMC2(t`5+T[O&PJSr^A]AS^
%eIFY%?E98t08$-cg<a0,hl-bEi]'SO7>Ynqiq1*jV_1'+&s1:T=p=6,itq3p&0.TKk,-q`D.[\.9rBFQbtYaZ.5q\un[MLE?,$<<
%<U8K]@kN>-A4CFH"FO]sbKXn7\LfbLjlX#,gm5Rg[[_K(Cq2s'R2K4hXINPb,H1(%QE..&DFE,,D;5,,-eTha[_3meL5k\0.pf+'
%*9d*rL#>I\;sk;Jc10q[g=K38J!m+$@BFggh!]E%j_!rOh+bB8S,hBF8U+Wc\h3,\&f+UJHeQSOlFC!^pp_:8Y+ULeVY+f_gItLj
%*SMb/QRi"-l`\d\m?SnUo<Y%,2lPG)$Ki%tH$&qSj)QHuX-AfbBW1`s-2af\i&/f's"_1]Qi(5XEOl8i8%\3@bFRYMm8c#V-J?th
%/ecuIo)7ZSc#0_4Xo/^?bc&?D7Ml#Ar#,G\_4gd>K!qGGC`Ci@!o&QTnS<""hkaiLZtdkBAhp:2ddLD[Sg)]ZV)QVodW8-t^cXA+
%[@4r3[Z3.*;3#AN!"$T\fk%`ir%cW4;Q,jk&!o:ALA#"L[6AkJ-J=#3h0V[:6I$o+6*A%CVd::-413pZ,NpG1.F45Xr/L7;$2L0=
%>a8hP*<4RJ:Rc16Ni.)%E]UX\c:NPMS4RQF3MG9QqtR:oQtQ6m.QpCrBDGf@Rn78gr6N%.aL>@G>UKgVP9:2jrJ=4)ODsKu\-_kJ
%Zh'RV9S-p5.*Bt66>BrH8R6#;L:Wg4dPe]dWFcJ10JbH:,kl9f7Qs\O\(,2bU*s^WQ9Bq6aIJ5a4WD!>bj.2N_4&rgbaI(48XI-l
%q65\s_G*+;-]#7U%XnB:pG.pXn/9N']n$^S'4KJ!e%1i5A":rur<\XNkHFd5hPT:Ts%sEpAS)'@K$DMsi0j*:"de>[`2P'Io7RFb
%91XY6e"8mG,=L]l!jnC:DO"Tc;]h"@-4%TO:Wq!p:u;ZGr(TFJ+u:%H9PT'h$,SONhquC*':(P1>.7cj<s!bje5j+CP9Qo%VVr0+
%E+d&9)17'@lGBb$d')IgbeGLP8Ag0\bn6j[7O@Q'c&RbZ`FU)<alDGd"g;AJe'6b_h8Qa"8!:?I1Kj/kJ`gNdW'8%0IPoYO)mp\6
%ba1Anea(=T_<M]`-8(M]EK=UKP)+I`G*CWP!q$WS<&FD$hSIjhSSLHh9f?5#"K5D)<;MUR'`n3*S])LCC0Pi_1or%'/0q>E[>dqs
%[Sh\bW`Ep1B%A6Z'/c=iaaDlX23RGiDDj3p94.e/P1Y8damGd,s/Z&R!O7`\cms;QWYEm%;Hp0QRR&sMj-`NM?GT]m-eQn@ksR+]
%EjO=f`.OD*f*ZC\@CEO%cU=0."0HU-1/X3NAld\'o1YB_o$8Z"XD+U*)uZUa8]m@DF&CHDVBQhQEg(N@P&+`27*ghTU*NPeB-\9>
%&Q2>Q0$9.bSs>e0MiqU,o3@N*0$8Z2g<=V8VTdU/PCR[0F&<Qi`2T)#2^oOha_#-RURq-`PXK^MmF6,SF&=DG.2O;PAnHb^Iq=jV
%(3=4'h;pN(`[("n[Ys;pb4(kW`9\5:R%901XfIiM$>riA_X,9NJSW+BraHDc/BY.A*kuusT8=@8]5_2lI*F,sF1uf<^?3Z8>(Rud
%o<gScS+F%Ui+p:A60@Idbu3-p>j@i[c+2R.2HQ@uCH"jgRrbtt=8SWPC@R,,i<8/pdrluCNo8fLA7m@l3%(KePE@pSUBF(@-_i[>
%%H38JV<e<kI'W"m6ofY"[Zf.Zrb&t*BrCZK:uA7=Ii_ACc/Z1iE[PP-/hO[hCW0Lmc"_3&CL7"ZRmUmqm@`5b,c[OMCHJMth4V>9
%j7qWH.*\]]9gMVp4UDbHX3s[T=#[>r9"0d`.-%f/:Fi,4L5Jn*MP6kgS,TOdkarUdSc65f+/FA3Z]N:3+P3Uf12X&=c2(2Ms+6q+
%RJbi.?Sjr&8c6]=o=p[458tc'WIIco.AN?^-rNBhR<JR7Bf4VH/t&lsrQFuc^Z9$kA-D^IG;I>E&ifd60(UC.0*@1\k!2JALWa.!
%6[Q$aW&c<Y_e#f@6[LMbHOi]$aOp]-a>Gj8WL&J':9A`o#^T'1r(P5PlNriEP**MYpu78EP-Z!]\E;Vm9JXumV;FE74-0D:BDcrT
%Ka4LbQfmnrH2Mk-s..2[kOIG,2`-TqhWSmpR%3l+#dC#),h++&1#FGQCe_ITA01?5a*d&)heT8Q$'^t6nSu;_jBG?AONf%1G+lsP
%OR6[WYIFKL^VtNdjKqDddM3JS9X)G+*@@Y[-KPY_#qO[>[@Wc:OFWVj43+/J-Jd6lo-rjNdk5>LH/Ba<P^#]>%p@uER!Zp:*jT-_
%pEl!8F#VdZ]#j)AhE,qFc.upF`(jGqkla:nKs\d+Kk+9PUp]cgeuAtgPtk.]Bm%SC9B4`Is4JYimNh:6#'KbmTt`&-G%0gn9<b>b
%Iqjsln$4Sc*9)KWb6bdp$8lupCdQ[>BPpF.%#muXo?8K6'/R5A*gO;-@B,k/h0)U<S[\4F?4KX^eu>2Vs)+#POiS,]Z-1'DQp@g-
%X1a7cq-o]$j(7Y'R6+a;NgI<:AaXf24'q'0Qa)\\DAI6)-nc#+?fmB8.CMM)NgK&k?7)RTgmgL!WGs'J.>)914\.O!8aVKf1N=uo
%bM6Yc8^90I`?p`^#acEtR#X='Ha/DQH^OM9'?Lp8VI(h0fKp7dnZ+c!UoX65b-an@m;q5G`=-T9*2c.qR<IP6'.P_BdjganaQXKh
%1F!k%'prl>"f?(jlb*)B]_^'Pd.Dgb:=7p4\_?mqrZsE\m8\UeW`/Ljq,=%$bkuPU"CDjG:%1lRgh9TaQ"1Dlaap-Kr&sH.1%j>&
%FaVsRHD$!f:ef#oB8u&_H&qu`2S_Pfh4&*e9\[hIe1]":>A,t@6IRORhKTJ-X&_rZ\#%eQ9&AfEP0KL$ajQiVL(b6Xs'sXO0.ucV
%OklgU3ro[8dGZIO_C+)+&gdPG\K><2/-0DOa-\$>B'0%/h@8sa,h^)jO"n&.m]=h6glF2a@nbY%bl&B"5K8ZW1&cB5j^'rE`mmeE
%1EUh`Q!V$#W`;]TD_D".SjtX87(-(j`S!A;adC<uW!.6AmKTL_n@]o#.nT)XF6t?_[j4s]Rf15a+m+hR:T<B6-afpcCTgh*<A&@]
%%XA?,DSK4J['ua['-jIZ5/iqhZBSlU2kB?^$OnCKe;4t[9#BQM`Har?C^Q'kb\QfTIQ\@Jc'(]73ps?n8_>+DS(paOI-FM3PsfP/
%9l:d=>"M<LAuJbYjIAHd.3%ok*'a?!c;D>OEcID9K(J7TQgA;Scdret#rCS@^"t!;\YD!<&*"u_HmRLj4Q.f&mS8HLHQWA#07.t.
%91`J^ODr?@^63<kAg`!!`i3OU(/E43g<FcZ-cjT$HfET4VSWuWo"'*L4*+WoJfLB:ErU9^R9O`RCMn%7S_q]IReuPXEsWQ+\MZ;d
%>I`A;g^QpfdkV5%/'OqPQXFHIF)Gm@c-<f03Ho?[F)u5:cJ9I]cFum4>b]Kec+.OEk71[tl:InDK_\BV/XP%,J2N[0'0"[;]4kVU
%OMKeB(M&p2PDb))k\&sli+B^+`4S:r]WT0]es2W\k&(\#qDAF3-KC&fP=dFa;ndWY03?G";?CU@bEZ9"kAhcuDR]AHT#=:(g._qC
%&q1kubg95(rQGTdQ%4*88O`Z\:<_M83NWE?f+'.Ke[f"+1Ol`UgMD@H?@qGalMEI1XX8OiG7lFbI#giBgg?t9T"3J'(PAWhiZdn%
%T'nA4r?_GtXh@=eOW$1.H;_@IOO)DCGE0k3+R-=hS'MPrJ$k9ShmY['E[gfC#iG,<-Vf7s6U@:B9'@=V[@J.m1_[*WnpbD6I\Q=D
%e8eIa@F6l^RQS>XI4E`K8(^KNOBq^R$XkBdWC6VWC3)=>hjJ6a;lppBlcY#q7QX.=J1o]'naCY%)'gu#/p<Xl.jA6b22o>/?04c,
%>UfN/9$plkqW/+<;`$Vc9$oaeH-1R0f2<RM9$lAHr>QKBZch(@0*@1\KjG(MOgE6jqEoV6VL&i?Q09+>K/qb780U[O-7DHKq`Uia
%.[E0(hJ"3*oJHe.,opo-&ot\:gF:`,2'M/"EJbXf>W>K6OtuFA1!(K6>rZ0>.[^[cknbahff8l7E>C^Yo.M&Q<i,!Rn;c24O5IO+
%RDan#=Ms<6IB3-;/hfBeY.%Oa8Mml#cOB,U1L?HI;5W:b'[2pN*j2CtoeYmB#Vpk<r+cr9$6.7lAPKkb>,U65.oOf-QqQpiSuo&,
%D7\E=c-hViC5J#/ruu?D1c4e]1=?JNnu4:*OhM-%14Gj^Bd2<br\(s?SL!mSE06!,E]l2i/%KXKG1Y)*Vk,1WPQ6Zs^QI&sB01t.
%H?V1<W2:s<g>eUNVrJSYi&0Jp;:3T<e2N@q^H2odV-7M`rf:d*iEl=.amIB,GLB#.#[HkRh^3J1%^hl^2_"EhQ/.j=,<#qN12]]W
%h/kJXT;1)8d7h=NbUb^#j:F4hnDnl0;f6c>PC/S2']T%uoCD'NO6K\-B0qXpXIH:<4a2=5\fFOkbLZ!#$g4/AlTE/WpS:pjVA3A-
%99ARQ2g"GkfW7PLL;YbbTYjj5jpmBf229NdSdS;.c1iZ9rpd#eO8J_C=glf66`K?'+j.u?l`VZ8"`.?:8..!_]mZb@]qY0U1@<U1
%m<T=$dSeip=."JiT6Fj3G3N?Of@CAY*]&iB4.aR/BSJgmEQ6UPa&:aMA^MYphKei/J%_N4^(K_8Pcgjk;BJ,=WTp,Ji@]#)k,?^+
%3)LP@)*_"@7hOM*ps[nFf7RB_ODX>(-"$D`a'Iufm<.'(8Z.59]_`47DYSiKs4F<03i.N4/l/<-:3p)T%Vh:[BE+dfmLq1[:B0CH
%BWCr)DK&.o;-XWU2JK?^pi>mOUrbhh<?`+UE:7H"W)^l7s"@,2kFe0dTGCgH<Vd0Q[0u(;*QYq3`utHHN'E)N!<HYm@`6<Ro3H)N
%ESg`H0Y_:eb8B<R_^boG]u,R$c0jPOEi6N)<k;.<Hna,TN)nCJrc@4_lDW:PGF4@c;5CXBUjGDr'q\'Lj,,d&RYo?JahCKTd<_j6
%(6#@f`%).`r^s!]pBP]7%WUqkfj34f*_Aa;8T&b3Q[aF\Yl#_+><ps-5]Z4tddQm5N@A7b^D02(]4IplOJ0U+P%3d,K5UD&V[i[7
%f5n8h\U48+']A]oE:Rn[<k15,>h:eaolrDDf<<hIU2S$471?mHG=K$,loT65'sV]!Sc%WuM0:g9(R\@oF%Z-_IQq>kP%F>9famVA
%>cW"tIZ@SpdOR5.j5+sWFu%o1aG[U]BkgTQk)J@/j_o43%NU-hgJk8L&bO4G;QbJb@f1_hQoe=0+\@?.Z.<q4Np2sH%G?`ffoe!I
%J!@Ql[JsL)kZg7VW^,7HYr+rAOknCWe4qCT#+Zi%C-VL*QRZ$O^%,%&?L.P0N2<DH`fYV'oWWd+[97C=oZJUJC8]VM[mQrU:[k4p
%/uN!X<X6Ob+r]S2g%g>EgTB?.G3+$%,V)e$(KG>(1(%\D:o.1\$k=u'OimBEXjh7!gC$&0-PSXpn<?ja9sTCUrEecbdu$&*8_[FX
%<A4)u'PXE1Haq_^:USC5TTeZl)ZBLT-$-l;d%lFNFh?GFgMiUi<i+sY$-j\Y)O<IuUK4p(9b#8+h`J1SbO@-$PVQopdCkTXHdW3E
%9HW$!'=eJjgG\HBS*KN$N,9M@_q;t]2(X.1$ECL_,IJK;[If^p3MN`TaBPAhkljem+!uPF.d#a<m>-ELnQ+""NDPEa1,_oJ.0j.e
%qn4oHd?m[PfO_bQ3\&a*K6G#d*IKtCa1K]Nie0GlnU@Neq1gsG?Lc?Y05@a*FAS$u=8NT2'*95,@2/b0`RrId#8i5C7%Eg!ZW/#7
%:0QpB3a!Z'HEA'\HGj#W1j*8%bKX?F77:GlWI."@10Q#r/T[66..up!n/gK8ZK\ISe&s_s3Vg9'e=W(Se:"Z'.G&Rq?#D?">">]/
%lTo0Y0[r#[q*#3c9Ke!BN]N,:YL>OjF9F+Ki!Ld8g"60XQuHdrp^u#r?Q%nDq)]P+MFtS5-3Ae>iGTp5'0<=9.IM`=L:VIDM:4\&
%4sE)*dk\\-^2fZc-rsM9Jkd9$K7Q`hH`4;4eY"t_g/<u=[<f`_LY0(-bK).KYYk1nib:NQ0N'/RY2Tr/-k$[igs#nE#BCr90K`ec
%#G5'&^H6Q,(YWaW<7r3W(%&;=qZHDHh]]H@%eTOu>[HjrjUJWR5(?X*fP5D=mi&*Xf&Mc``_:V`dWk\@%C`t1`2$8I,?#hY5;PI*
%!&Rm^!_Ck19R&#p,n]PUcMI(H\p4.TFd-SR@[$(rEdhF5g0s8e]fr;rpT2q0U5bb8UT="R3lI(?h#L+7N+km^)@Fmrh=uB0:on#:
%2dr>GUJ#=-39V0\UQ+DU.huR:isn-0XRR1_-]PIV&`dTjpc'K&@&TQ"g:gGPS96Kl+17g$iVVG]p_QTh!Vs^?#"BUTN]>sF`Kcc%
%;g!H[9NB*l,E+6noXJS;g;OJ`/)%G4%FPIGc/bp==3$=Nmf,Sr;2Ee@G>u2T%[n<8GsbHogDSHWH&'m-mS<@)4l]o'El^8;],Al)
%XC\M""IlBSC)+1kFAQ]*CP<tUG.ihu)W@FAS_,tc_p:=!ea8-RF+M\s\7.=<oJ9M2OA=36"Q.S@3Q0W)c;?TOJsWqb3k[$JCT08:
%j+]YQmK+SO1Uag5n?-NQXdq:=fk_lndZO+3>WF.?C`V-m6'?uamSU+<.(@7&cf+c2\E/#adhpN_7lI?RRWRp[=Pd-H"&1"kG/T4n
%=#B>E1TaE3'XIL"?In\7jS`eno:LSJ1pS!WcOhMP`JIAG=(@n<'Lk3-mF#VE<\>;-Cr7?)G1s(*l]n)Dn1/3PBm-\uAST_qeV?6t
%QgBkfXBocl3"FL.WXZ2Z$C\2EY2mc>ej[$qPmGUYKR_#Jj,19un\&+E5XH@+^/P^YbD3BINYbtEL;u0OFB\'OD4m6G8GO+SXqSun
%)`o^smA"^"Hdr90CD/EgPG!%O^9;O9j.[lO)AHCIK%>R>,\S0)aXB22DY>j9qAAWJNS9r`<qAr7LN_MQ;+-W1W8$UcFpA6K86r$\
%3N>@S^$=%XR:^D9L37ug/!pu\E-94Z&/p_qBoX(5Y%,+b[)(.;NZ*(:bG>+B=.L+1"[2V_R^BfFH&Na3>VgR<n,L"j)>60$]YN^!
%FZS^AD!]Fdeb%ohdn:T/nJLk-NOmk16h0]*BhAHql<3'Z.hCCVQaCS:.p$^1DUH/_qRK&&T?Q^ff5Z`R6C(n9J]-JYa8KW3.V+Z2
%b1dINbik=3gN'V<`=f=e2V*P[1u_]g_OJbU-?Tk>V=H2nEN?'7$[W-54.dRkIMeE>C(8VWinE9<Kp!@jkc.qX]NuFH]PEePcRTa7
%6-E<tFKE;2$KhSU(q-QQ@@t&P*I"mC"#o"1mI-^^'6K7eJTE[9=Vn9jHDb#%P*d^XX3/tAV/opgD8M9rm78mj?!ZYO4I<QnY!&1p
%9/,*[&&Z9)NI&:a,/;Z"r=d(te@f:E4,),AI](cLJm;!rG)'%]N?K%u,,'^-_pCa0[^inVH.=BfK9Q(^7q$_r1p=h;>sRClm)F."
%L&FrEJlK8oUkfFWaq^!^!JQd3DX+FSTUG)2J)D6fbnTU1+nl@_$Y5_VGO]+Mg,]R=1eeYjbbX*;H!pJm=8E@8r3OpL[7PD8>0Rb$
%<ID[,O?l[b[:ZGiP^]SKMCbT;ib3ihD(4"N@A$5SWj+@bS>qpPhbV0AbO'Jd<fopO[pM/7JiB,%[U]VqainK`3l+"^\og,;:p$5P
%2p^u<-$'B1Jc]r91ifEkCQB(!iMDd]h&\;p\$b.t"?.ralWWm26/0H_RpZsN\B57pd\GM76;hp"OiY+E"W!_`o%PH[cHV^qk_^,A
%on_Fg44Q<#\o_^lX_+VSg1`Er!aVDYP[7mW=3N!7916C\]c@\b?p6Y(_Q'Z<eVL=U;%pk+U7ckIgm4af>&^<uGFc7mQ"R?lH@!pg
%Oj^iLH:Y8bPf+H0gWNbV3qP.SM8gX[Qal=6eZ!FC.s++".76U@fZlIp760qt1llWH3$J?LaTBLQ.RtCf&J;>7X[MAC9_tqnk:AR;
%q].osr4n=iJ^:B6OQ7#IdAm5nWEu3%/u?#ohH\;e0;5cb'oYeaA(753i6TXh[3AiFHM97Xm7CtQ>NrMTb.Z'jc_,>CJpm;8`ND1D
%8ltJ'QmaV(oP0YB%d?lu]&"%<<J`!QRVt'am%`@7de21OCQ[bMJG-.%cX2[T_hW@8Q,bYHd2-m69/)P$;&4ceK1G+TS1!JF3AtA#
%HmC"A<ur;7oElSMbe\O1mlh$V.?Ys<)l.21)!++&&fG3PZ`r&^EC%7AO*YU=1Y1N2[$"7l;&BOFaTXtTV<K0i8Y#ST:^6Ni*`o3T
%>t#:e6rFG[XqYE6W8%dS:]$-HB":r<@Z)[EfoK\F-;[FYi8BgOO8Js\<ZnWEF8>tVp@O1QBg+:30:MN[jWD;S),)n3OR0NnH\/d(
%KdDjb?gm\DPu^,tfg?k!7e80bf>jlLI&`/[6g@p2:V5D@S?3/$b=o?t=@%kiPOA5LT,4W)e@'`=:K;DjiUiO_Zb<'69KAR5=]g$q
%-slX-<t!>"]9hF-nE^4I99nE5hm8nkhuC3rHLU"39)7;k$hO@@3k*[CDk&GP1iL&Uh-+!,OKXp*h7Lt%k=+RZo%KT+Vd%`YjipR3
%[amM<MH_PK>M_O!ZL2C0\+$M=ZD?;^>PXG-['mQqm]L\>)NSU$[?]!@SZpY&?LHnMlclh;/(i%sSij+h178@p(ZsGQ^8D:n6L!@4
%qdI0>q"?^\I7Q#&)m.@;@7'F)nYpT-?Rf0%%s$Rm%h<9A_QigoB]NiN?2rQ*qtf?Nm!_.ip@;AHm?Tu?Xe(eAY:XrSNQ&c_]ma[(
%]m<B$n9L;5')O4"Im.gmosOY.jl>-107W89d"bBWlhs.=hu(3sqWu%L$q-$Ak.dF6C!gkn^DAf.)n0j%n(Z[b?M[Dq(@eP4mF*ok
%[tVdnZ!tISaIcXk/$%?Mk5E9SX/3"XC\\3R9)5.[kiph<G>;3hQ1>fAX">*J2c"""?$fh"412\-QYTr7<-._ZcQ8lDMkBk!c+X#3
%Z%7[G.kaXlR`8KUqfsdJX?:/I51s+blo%$jWO_HWm]i2I<&XBfZXl9<Z;PqpI7ksN4p]pG;l_P&nrLt9anjSPL%J9)X1LG&fu*^3
%HY`G:eN4#T-/V2.L;Lr#kK[!bhtjXgqR66?ff6S7RE'a0]LQ1Pl9)Y1C\d0633Sf2Wi*D6LJD"rkhGC"VLQ=d<HqbT]jJ@Ypn<=S
%*.7708)YdONHTDj_r<lrT9`O.DlX,^QdS(4<;\5@)=NOo_VfXlimXgE-)9trjG=f=i5t7Vp"QN#I%/N@BtWi'*DSu(E\F.5Hlah)
%?[/l7<e84Dqc9k=aN%"1n<rBcE5#>Xqh8sHL#^3,^DG)T#Bt77d@8becFnF?ZJ531:>pH$p3l?*kN*AG->1$L5El9Ki)DoT&,!oN
%3U9so]2\QKE1!hWEuqM)2t!6$o#Hf53l@k&?$Ed3)GKA^I;cdBDJq^b=XlP8^6I(QcWWj>.*uaB?8"Kh>Q-6ZHKob:[?^^ImHjh1
%?N9$Ic5gfh,f7`Lf=;V+[7:q<SO]*(ieQg4'BAEDZ[u6SZt;'7XF=G,'aR;N/M6*grg36N212q(b7-*ld-'(r\'O5jh8GB>`TDL?
%n:f/4Zb"dqq-$r]I[S;mX8<utLNgM7b"@Ca`9Hae6##;,qdKKRff^i<DIuKCHmLguhdU3(=0)I#f8.!VpM"\m*p-6nMd:P'nn'iH
%IP;8Who!b2qV.^[Dm'u+91Su[C[o`&Q[,#H]>%?O,\HYt0B>%KT8d#-2iY4LJ+"ElnIuGW=LY^kU/,^*oPg_B;C^<@N5_^\?Vs@(
%YVk-9jg\8@fP\u+Dnfl?PL6#;?/eupO2&+FjhCDfNEj0m[[#Z5I<V$tGe"Y#cn6rY?5]U:C%l+\p\=@]Fo-PNk:CMB.b=F"E;\Y)
%6gJT[$;2qaIJ5kbkVU3#chh<gmGuANnGBDC,O=tEqrV4]45B7QG'Esrh>:5KY;1;@a9>6nB[D(!XldnEg9oAo]"S_cocJ?!Q/fnO
%Z6dN%FmZ,7>^5i<?m'a?I0tX6kd`(J^gQUt"7PR8b!u,mpikh[S^[K/O4h4M0CnC,5PoS?om&_g9tn=fI^")^VgmnPB(u0!f&0JE
%%%]qM``f:GHsa$-:8j62Y<L^d2r3<MP6LpKbF>SYs46!M:ckkak;V#^gJdLY])G)*Ng?=%9+1Q.&a\bT#>I!fb$b.8"(08n:]Ahr
%gGE6sdjNR,S08DF:.EF0VG"(_0'jL3+50.?=lmZuZTuu-$d><pX2.%V%43&9@kCm`e#::o2o0NXGYQS?Zb-p>L3G+o`j4Bjk?Ih6
%Xmg"VBm>U.V\Cc[r2fg/1u;Ou:"5^qXe5]5jOrHJ\NMTB%^LAcniAgb4[.;-RalK2#8A#hXV(=)%kcnt9n^td-_/drE8CjBeaSDX
%iI)17jO'^$f1.B$D=h_;NkZ?42#e=#.C0Na.C]CEE#Et,MAp6A)=;3i0-ef$56+#W4Kg-<?)F:a7%Og1NQ0_JcLi1!7VDKa*SS&p
%o!'_VO7@%23Vd?'61&a"EoR2n!MKa"2KZ?&#KY*UE>[@@,dS+8E@53?Ju\`7a9?hDlQ>lO8Ah@N#K\3GQo9g@o&_,7]cJrO[7%Bt
%==::mfCAKgg\dOG!B.g<a1jeHl\(>)qeoh"95>&iIBis8NO\oUZV?US-_$s9>ORnO[iT*'f!%"be,[p@8Y7H%XW?2BF-<_T3F"(8
%cG&0PfbW$km,$%Lk"].t=Zg)5#M.V5`PY>#S>75j':j)Tj5Hnecl9:2Zo`&A+"[3_e,Jcj_TS;'F7CjD%YO+cZ`q-OpSDp6jgMnS
%d"eN%ACG#`Pu^+S9n+b&c@>]cp;;r%W4m*b.nfc#F3]r2NgZ2Zmc^GX4=WN:W*HDh^$,?GZVfH0-Z;(Yh8M5ZZ<q#?qt3kQ=Oabe
%"2(t=>IsKPC\LaC$\JLL]"J"#h\\!Q//M?[rh].J^iBb3_$EoefUNf06Pf6ZZ[i;?eMEcZl5ng;4&]nC],*KYE!Jlj)!]*Y*c,bM
%(>&.RKpOg_!R:-'.//&Tj.kDqH_5Yd.YDNH,E=6kW\F-2F^AYe)rKHAi8e9ji:,52A=Lp$\+S#Em.Qp8K_@g2Jtms`>\8&uOZmoX
%7hHcCkN^@78%&k?RXoa'EN-ct@K#P!5]l^G(%.+irO13[Dr3bLrP]N;eaU)<Qe4!m%hu?QcgK?8(9.2QGJ1<ZCti'=F3@YIm/Ec1
%cKi[miuBa:SDD;ZI_)p\.m?'(;;cMM2OjdaaIR0"P+f1&Cdj#_%(kIkm`]orC[aWCo@e5m;:fbe08;#l-WaJ'I`b'R\>:jN+5J@\
%RsgBrER/QJJmV/p++Nq<b3"W;l^]nr*q(&Oe5H24mq#k@g3X3k4T+-qS#MFYF^K49qF<X$AiipumqrB$F&RkTH#E=_4Z,qI@:j5U
%dlDhd/T2Xliu(n)B.I=t!9U\!5JIdLI(PqrT!S8R9j`4q]esmB+2;@bQ'^b!K73'4VNqs4Xgkah\c(N5l-[BpMceR3)*gjF-AeeZ
%;X*]0X]+T:>['AfdTekY]m,&&FE+KRda8$6kT8d7(L/!,dtJU/7pd".?,W4:`M_-@U?&#qP**$.AFHiqA=q++8i?p'b,`WD[M"ZV
%=c9EBI'$Uof_pp2\?!:kIa=W*14_A,2X]m8,g8V22G'ln=m%-T\p"Mt60[A*SR2$OHbCnQq;gY<C8'ANQU2Bk\4u,`1TcagIRf&i
%\om=Q7N;WlD*)uO0*bkQ#O87Zml\nG1V5[W]%:IuKVjkl?bPtn(D":9qaemp\[D,opLPK\@Aa_2&J''QhP8!X2^!`JMFW^le:oh"
%k2.96`)e.1o)oDbHa)&W)j][8e6Oqi61N.ld333T/)WS2%uZ]Am8MS>n6ZhZ4Rba';"L0#elJEV\R4!&e3<$]\*l**f8k)MZFg!l
%0KdqTXabM8B6ps!=("G34F(2appg,*)TXNi+^Vjn2er0Frr'HUV8GChh\V=;aDuFlmS`#__SZOXGm7N(eVfW<B7q0%m?Q_DH`&*#
%[7ICeG)M9>SE%,l_gSp'F'mMThX1!1WAj(1:Mr2+c-e3Ug>:/OLH^'(9AB6O^8f2/6n\@Z\%Wk)0@q8XhBH6D.9e:7J,X-2k(_UC
%M_r]$kLR[L=1*AOaF.&kffn"u-2@'#N;[Y;Y>/,5`MM,jS_0a?BD:c@kOh=5d0$cQ(,;9d\9+WAZ=W?$e=1*r]Cl*&r7blI&4FK$
%3k%;99)X1)DL1\s9Pm`rBc/tj"-g:VprS>=a:P&ZFIX_Tn'>&CohBe++KLFuEp$K^GjfDu?b:a<-N(<\Zd#BeX\jnmG6?XTDH5Ei
%f(!65]=hHs\[IZ:a454<[ag)>:>5/h6a((Wcdc*NA,klTieO1Ns4ib5h`;;A8Jh0m52/-SIY:'-7[Zf*i]fX:Q;>\M[LkllVb\:R
%'UJN,g#@J3oljQ24=hJemQsGPf21d]I]&FVIQf4Bf1pL]hgM5;AGsP]g!NO"O1qa0h;9WI<XZUnEelC+\\5G!&=fhImEQle1.P#*
%2W#an0>aQVe"h=*rGQqFeb/c>A+?P1rZ(LkqhLI2d;>;i22bbMpg4\pI(R/ep3==o)uQ],U0l".<mtj-YJ-RH1jAfJ^2pp9bcB)b
%7(;'[CuXRq,S,[5i'I>3C%15"Ghdib5EY-`rPJ.Zh/6ZcW)R#MGk^&6_T;K/F,fRbp-kd&I@J1.f`tQN<qHQ)HIb7-iV"?0NqYVG
%%r0.E(b'?E5CZtR=1\'FX`NYuYAi:^A4GLZ:NH*g+bE)M9)7L[k(&CWqZ[sk$hpd%?DY:&^=>'X5!(?t5J7kphVgQU\ZNOCd#H%N
%.4o@8%q'p:!k3DU#Ze^UOQ\>-Cr@_qA3O1Akh2Ml"&bH9^LanIS4V<,Za7'iVsQQcU("FSqQ9TRG*#mOl%AU"NE+3Vl'JTi1@u1-
%E%>8[Q]eU<;FoUrD)R:e]1Gr!1Cm!Gf7U0:[oK/LGe]GZAWIW[R>+K:V0CT0$`$a9-d,_P-HXj;qmR3#lk&lk]=Ek#,/:hB,BDXZ
%Ai8UOkr#0c=05SMhm!Q)ceI?p`_.m3HB)C^qYRZ]LEAmKA+@[!%khAs6t5A$Y3rIKAP5Ao6leZBgdcdsNnrghnS0H*CYW!rp&(ML
%X4Q*5ce8+K9T+buUZ.EEqB2ruX!&MZ+BpK(LhYX1YXcn)[PiJdV=!a%:k:[n8';s:2a#@`@cb&iR4On5SPmkiI=>K)q>PbcPKi?W
%j2V&pADM`V"tJ%,X^I(^G;6uONbPXm1fb*DMq\aXkmY>&YA3fRMs0]m?(/?h))X9G'?u!1[TY=IN%=,T8)(YG!("fco<4&N<u*KJ
%:V._H!M]e``3,[_]RKVs(<ii"[6)R49%OMVPn*,@*FbC2IEd1a;TsIQh&ZX^l-dG,o\7%XVU8ZUQL?bGf=MRR;a:6;@.f[CoWq.D
%bW>W(n#1XIP7Yre5J/U5-RH!nXW7(fc?Vn7H;o,/lOh+')0=`tpoaL@Ul=c-8o#f-m!J^0l?G./fJ;TQJ<d?-3-8PiP-VZah-4'X
%]/b/d*1DV%ZrlSM50S?;b\a;9c8d-pq:#gnelfEG]RBDIXlhmk5L5sNXPS[<G'e*![J?Zgo&]0(..2Js)t^L8q0m=#jmsG>8DVmU
%R^)Lu6;7Es)2[>4G':?4*t5F8o"2<t_frQt041*"rHE;L;;=$&!nd>,mN;.lE80d9aZh5EfZrm7V>dB]oCVpT,+2#`^6_kn'nqka
%YDUt3aIX)AlRJB6kPjJ)2>;9FP7_ISTC_JW[C$?A]m]WJHJfB@Y#[(Mb=;<T:9L2>pXe;NGh8b'l/`-K5AB]Rb>H%HolL-I)&s1>
%GY0o]p+=";pk<M]I0=R8a,e[SFSftlZH]/.DT(^mLAYL;==V>]2MT5"97#ul5+U[0Hc4oMpBR<?9KU>`^N&uQa60(sIG:RB2\(St
%S2fc:#:-Y0=uWLa^1t\.WI/$_#HR`U8%$C&eYW!nF'3Eq"684@@5glfOe-[Jl%^(N<50XA=Lh%IqrMn;>u0>;,`JES]tR4H,5AZG
%5%o@sM>OgXm9ZdU[q`l8mnVaOmn(89dJg3<B)CUI`G@G*T.V.soWYgQ.TW'pG&HX)_j]?8GeM0&qft-oCXNBp8e23.msZ[^hg6_2
%lbH37:n[Mnkp3lJkWX%$^FVTr65K1p=^S6+n:]1;NtB'/3EeUn;YXLDIj]tgd6MOIP72222MV#gJ%AZT(H1RSK6(dXB"\+bVmPqK
%kM^<%4tO*N7kj!iG9S)*K8jU^O7nM*J5$MJr;k'Zo.#*u6YFOHTA;/:8Xin+fKZ]I/:[W,P\iUr[8Zq5nC[e=Hn)e=FfZ#f(_2#i
%AS#BKq6%(%m`c@2-7C>!OUt:XN>EKQ`6eN*dL;c-IXYr*cK@Su9=B>[=PR*PM>A!SLmIbH`QHZm1t8#lmCW@eilA\1aT3r,>2+,n
%oJ9j[qko]#<r%5@#MFXFq0*"Fi2MkC0BO.l^9HbTQ]g.Af:!gdnB]`gUMp:HI/T&-^+BTiG5[YCGU^P=kmn`[c(dN'=Q%aZrF'HI
%agliQ:2a)tkr0Q8e8e/b+&Zn-L3?,4ha@XkYg>abJIR*+cb$rrLho0Lnt5"#gk.r3;NA8<VXj&MHo93HqL%d:oPs;4nEi6H;p;uF
%VMQ,%e^R1c2H'8kVUAX;dp2m5DPtpKSah*^8Eh!bGP1a!d4g50[UuAa[dIdUqVTY<oRZ+n1kKA<EjX>+bb*)Wq+%(WYOV&R;up@?
%UM7GT\1'">3PIf.o(X*[Z!>PI?YnWI>YfeHNbql9gV^+iRkYpja#TNiS^@ir%Q+YRiu>-e+P4s'[UZ1^qQFg`WO-/^)+-@\<;t3.
%Hmds!5%&iZ[7rmIgDM"V3KB6,/X-2m$lo=0@lp"$]a1S$%.n3nKKpB0<h"8;3\-25:U=aVO6dc&hmFHrdnMFSqE2E/Aoq<;;n>=:
%>_g=>FZX)X[!(9W18\d4q7EMZ?+A\Af/'#_:g_gs1PSQ#X4'*\gSKWGosK5&9c9Bp9/?USNJo5j!ON<n"45=Q^2$V.PK#:.J37"l
%$':]t*R+`.`r`';POUb&!BlcmA8#:=o/2KhBQUTc])!;^a4_^KqWbFlLF>47:cC.aTc#U*Xk_:JN30^PXM_MA*Bd-AbrE.g=g9'l
%E)IHH8,#,^?Xjc]<%nLVlKFUI`jbj_cm>2=:d6o+d]lssrT;LtVMi8B&'JQQn8p0JQfeHC<sM.`F=3iQL*n+e#K2m;NZd-+bBTHk
%De98Q$cF/m,S9@\e9m\6EGarTQl1Z3(/U@#d\h7H+Y`ATLef5u"N6QPI!0n4Sk3$og:1b>b4qk%UcajpgCBdMlSpXLTaRPF,Eb>S
%,m<8BKZKI>K;>X[p?*%]C:l.=1O'djFL3F='fn$k3F/9(fC3%bHb*D(dSi!1XNn(V=U.;J'nL%4\n4K7*S4">_ICi2;`p@XU*lQl
%@4EU8j<P;-ZgBKl\3AjTd2>e:Lb7_u(+@[m&c5"oO<;Fj2OP!dpNa[sLj>'C=;VufW>TgT>/i?<h8CtLD?+tP('Ji\!U4_K*(_q[
%+t)MC0oVcrq&[q,"&L0t3rKm081,blO9HWsL_uL8&VsIsqKAl*q^$>>EC,>_7)::+$`k*fEEtAq\O<2IjAuoX$6!n80V&Ja'!^/Z
%%D3pC\%tTE_K=COR!s1ooEpE)<"-sF)qQqd[&MLhGlht:@W-6I=!2T2C8CsUTnYrr%bN*nb\.F%2V0\nR2._[;4P`:GmVrY:7RN0
%N6fekpu%u0Tn"X-CD5HC9G`,"YY`fbJ4-?S-&Edk4rojuKQda]9nW:gKU88>[V6<e,*'giPdle95^KujQRIGrS3c_^A0ULLDd=Pj
%T8:;T_6"kgE6C'iI7ODBc1m5\U&iuTmk_*@9N_Lkm^A8r,h9CH!H";PM_5Eg7WKO(&V6_i8mk!&J#4Qe8CoWlN/0#A(CRQT-f[N[
%Qp_$7">_41"odl-Bg=t_.qloA0E\7Ha6W!Fcr'/S-g'@Q=GJ2m!NS'a$,APdMPfQf?nEA-.l=?dPSrOA6Kt'pfYBaZ[q&\q/dm:L
%AggY2@`L;Q&\W&NTijbn3hq<t#=-mOJ.Yp0Ji)IqNZ3!h8$Pqt7?)<En:`K^,LSVmjt:e\?'7&d;%4NbE/Q!2UQ[Gu#7scQ0iLt#
%A6/1?OdR!0@?E6U2JhF=_81uUg&qJb>)HL3_tKlZ0a^jcKrg!ol@).P&b05d&p\(YX9%PsW/`1f_O*V?7(9sER#QELQ?3r76:AB6
%K/<jlM1t.*GYDaDRZ&gt7C#^Ei-"8mF<O37C_d9c+@Z>83Qu1#b-3\i8lqj)bX.s&l)YX3]4Wmo@8/.O`#)#oE^X`;&^+uoV@16`
%'IA,N23;^@,VC_eoS.2npf7Y$RaV+o#AFr>?(@s5Z+0O^jM=eaYX#@r&7H0N/)4UXFs1TTRa-Kr_FB/W-#tcV5R9(MjLK;TNl"(I
%q1o&,5pc^iA0h3f[^lOgTGO:T.8mm\0t3h1_l;"?kWDu`'"_OPlU*N`4=4`GBSIh%+jqs%)NQ4/GAsr.e1@*="3^5o"<BfYcub,H
%OiWDGC%F_AkimAE=r6^#OR:Gb5Q@DVql,:)WHSTb^Pb(anGSfa*F=@e]CSadokg1Sa7QVpM[5r@A(,14%A3feZr7a-(:7WAgU'Nd
%6"J)ZC(l1R;brU39:V7?9W`#sFE;/jGX<sEmC!K^#jOKgNHh57G\uK0$uSQddA5Z9P>t9\&OXr:WnA`k=^4;s6<>+!#0IDoicK:3
%k9)3A$VZ,fZ:75TVAXIf1rSbf.6nOn/KTeY9tIh<>r?KW2[cAmdX03:%$+?l4NgZ/?'lOEK4^l7o4\\=+Y;jmoGab_?njc-rC*2u
%=^I2ETG/["H>0([.LQZMbm1PoE9VPg!ag/F%I#F2Cf(?!TF?4CBc;SjYS6jhZOEpr,p&HqQGHpHMNn`[F>]TqMO;*4?Q.@a34#6o
%EEdN#Bc%h]6\?4$4,Cp=kXr@&MeFq@`^&Ad*?!oC-KDM_DJ;g'N=3I13+rH<89AO9(r,%G$Gne8K6:(.moVc+M!pFV7^CgD9*%$j
%Uhq$YE"C$1@Qnmp`4G2\TL5)#b;=,#0N6>4Y9^S2/+&DjA99,g`$!'[q^,=27O5tU`<dC>J[=[H+@mhF+#,o>FOq*N/]5L;&6iNF
%+R*eNKK,\k9Zn**6ebN;kVH$A.GA>/3@Wm:LU/:LSjXf3P0SHCY)K:eS6qL$*PA!Nd6S<&*nV*>%A6&OkVT:LnHN`e+Qs+dBL#0[
%btN(&W1kR&YTj3P-7oW3@t=`GjsqfPlj6-@6&>pX_IMDQF9b-:TJN4-*3G=Df>'EUfSq(SF]-e5(ZNju^lCt%+pd^@beYi1_e;5k
%k7W<TW?XG(Un"(ZYaG,Y%*aKl#Yg/[OVA7L,3YUhFi/J)_k<(lNBeqiN_.q%U\c<1,I8#gcmJSHOG0)H5sRC9;KYO==i>M%GmR*O
%N?_83`h_(<qA=<3BX'e<rF">H7j4#<gq,1tP->ZooN^>a,C&C4ciVVU.u#VtD@_nq(9%].=<X8RJ=MH,_WtVb(M<WtKB`m%6C*oF
%/kjhMUl;:7SB`ZsONd2GK6`@uB!25N_n[E7,W0`2+/ZRR3U8D&&oT\m6A["N[L4\.?rfaUdBm:96hHen4<9>S3KqCS!P],<&(FEB
%:b7,"Osdjh"\gfe@`=:L5"*+*?BF<"0SsKN,3^_G!]:G]%Jh9BJSB+^m%mN0Jln%K1#aWgTp,'+JYa!*&iP7prrBdN4eXAu@JsKP
%^]s.++M<9]ZA`>\KO>#C6b:^b3\JF)apf4S-_\.oA8)^cX@"!7!H^eEk)`u'((:^3<T&'TTZ_t=]G6cmDhCh&@c4(PguNh%M)QW,
%nZCTl5ULFL$5:s?:p\f5ThS`V?!r^$,6t[p5sYO;`J+e(FR8;pMmiGq*2n(TP"7O3ZR%l<MC]m6>uj9S`$pP=CkjI(L??s\9b;UA
%/V8&tI#S=YQnXcT>)4$t=eHUi6+R;l'<HdfP&N1FQ:SlSq_97L!&>R,ATTA3>rp2A4J/#a.Ukb>bmQW(%&QgPOp5O)PE^_0itlbm
%c\1nPI:&`'Qs`NM1Ik;FJ5LJ<3s]%]+R-aEaiYeN"4c*])>2)'p6eJ_=L%u_2tt-sL)NChFs%QOUI8E4#XUBVi`,88\;rbEl%!Y>
%-O^'oAA9-1NN:H]?-o_<$Ue&g!B;8b!<FJ$[o:Kq2+M0td@pYt@ktb3KJ[mKFnFA1#U#O>FCe.4*pZBob"::)QGh904OFq/lliH>
%o`mSq]Gu5J'IIEhF9Z]8K)<Rg'u:QXnY'PCLsB=.W"SH-KgJ$3V(XB]bSH<`+?Ob,J[lZ&m7FuFflq0rIR+KP)[UCJ"+)BK'os[)
%=VcccTTK[>FQ=''0rnpJLJSEf+b[6gp)j^70&M6r$R[;><l@4RpoJLMcmD=i11=TQ<ZK%]]ckU5d*@E,"sLko;HB^SaRj?#f#UB:
%`;G0iVg5p2*Bjgn7Na7CNsYeK?mq7-@V7#%3"nI\SIrulKsXCe"O.SB-0ePO<@@`uLkq9`\:$58r^%/@+fR,d.&RDe6UMHVR#]`F
%S!t^sc4ZaC"59HA'9m<cF`mld;@@n9cn)PFglFsQO]?3li=l%p>1i>=M"9n"X.i6V?Zs8LFq+rp\i?*#m.Q)J:\`*,"*Xui6+.0B
%Zu^(TBK@U;^`hotL"^P,+U"L>W@>=)THP>]\;O)/K5^h/]mM.6\3MV8E8anU#M0/1_^4(\Q-Y&-%^?B/i6b0\BJQ[FRHtM$s#J:D
%LHR8kGsXEQb"LsAXG@FZjamr&K$FdUY0g+4'#_Q(bR"=g)?iAE>FcO&2*qOi[Fjai,tOPD'kQu>XFS\9Ru$5mj^H[g%BDmP'uOQ%
%6>2Ql.9Y$"R2s0o"s&X$&dqQ%Zl]L/90NDs?X'VtGXE2kiK]Ki_7V=\CtXMS$88iEcT&QJ)oaSZ-u;KlrkC91+Dl]uQj'p2645L3
%6aHSlXUlm2r!Xl`AUtdM!/VFX!2cT=.M%%um)XhI9L'OZ`C`GiM;-Vb#nSU6&9.srX[r3ucZb%i8CG)ri<a7WjoUX^mRMnO:$ST3
%aCdXA]S4lOmRpckFAk`GpZ^`FRGi/F^'L5@1W**!QBd1mPGB_Y)B_.A4J*%h'L888eeisC"B_l_L]+4bLaepMn_?)<9L.'o,LIKa
%M`-2Mp0&:u'T`LmL%@YfjUbPo"'PcNq4uZ$b#iBBI)qWO`pNmCrukRS`%siX,AnnR(:`-nO<3p]?0DOUW$0ea^QWBn$_@*(%M4%-
%MYFp:^cj--4IM7*$rdfbhbt#@YT\ZaF:pnjdSn93Z!gl#]Ja%,K\;hJ)lLsW@WR_+/(OeEP[Vt)fe=)m05nXZ"A,T,Y/(GikpnsI
%-j2[Ap(A%FK/;1i-=Aln!@D\[PBf/da'JlX@9=20Mjo=ne_0g.gdWP!Y0[1T(M&;9hOl#sTn]>#d;M@U=iC751Zn2c8QkCae!0p=
%0s(H[J9O:<+T.4D*utS>))dbi)PFqAI&,DNDpp*M>YBZ\p^Kj-L!U\63+:_AY,e?7Lm,e00ca:\!4(:5J0:'?q:o!*6VnXkTbK8T
%@6BIIcN_PsoiX7Y?6>`DM-.4j<pPYrTKq;!`1?'"2q4+V&&YYXMj%V&O$ObH7:/q84Eda2i.KlOa$aR`:(@d.@2EliqE0CaR%^39
%3cMHWb;0h;%M0eB,9Y6CO%q*+%'75\L2MP[C!7W#_'Vp2!.r-"U%5GECiZa%bUW`pPd0C**snX6@1N)Nn;)/JKW+4>gb,RZN)[G>
%nMoKLa\Y[IA2RYaer`3Br69$^&KQt-A(aJ,di^o(@1O^OIA.A&H7a+`_U$Kl+L<L@4L$>;Dfeuu$hgY+m?S/?!jMm:&E3>)[P1EX
%f)lTY2'q`,Db0eb/Op"J[X\K\!+Mq+C_MiY1R)k1AOD-2JjIaeHi])e!K)Q5Mq\XbP0'MX^-WZ1RtLS)1W(><WKH`\c->B!&/d#q
%V7e9+^gL,r6Nf#("M>^t!B<W$0MNT^_ImhjBtt7NeIEl=h$(j`@<U=iW9`qc@9U2$9J6lb`t4s^^)M!(ZCcj&Vb7"g7h1:EOr=FH
%*I+F(]4D55Sq894r7;&<PB'#0'FAD=E3RfBKrp^l`0]]U;\4R&cGN'"bTV<>)fi`*8Tk*Gq,1KgC#q#[?.'0[:j--Q/O;rJ=<W5_
%Or6lG`<[sZ1^W@omfJU^r!9mF;76p*2%oeHq5FFPfjdS*0*:Ep`4MW3V!0Lg.Kk!PN]G9P3=jZ^H3UE4`2+H`k%pFR3(9e9Zt5G<
%<0*A=][sAV5jQAA8_@0T7XLZ.!saYB\`-e488rX]$-=hflu,c,A\kU.1j7%bPU`U=hMc4oE<RrI(<bE_Waq5kB$[`&oQ`'99f-/O
%>9LR<In54\e.fhK<,_uY0ks-6im.eXnruAc<b#:$X[$dV7O^(ml3M2[OQd#n;L#EIYWH-:=rLW*E)V:Eo?u1KE"8P$lPe358VTOL
%kQJgb29\J/NL&mLQ4KW8HOCh'au!$^bR?d*R]%S>cDg^Hp1Q-9"I+2TVEdk!o`E;+8>\\uAHKq>D*"4><*b&G7u[AA0"^'Z$Dn2m
%a)lqN3h0aiELDpj"GKqqf>NAJJSH7oQ9\tonbSL4!K\T7O3[i947"J@5+is+UcLTP=UtR)7qNCGH.W58*\WA)!6TjkJa.3E\W@u+
%)U9N'N^9K-fa7jW(G\Rl-l>Ph6Te&.Y=<$t_S"Q1h@,J\aok)%`XHEc,I;\lXdJ<6mW=CQ8gGgSDU?`CN)QLV]*ctC4=N%(e1"TO
%[t165-Oh*iS1t<E!0GAaGJ%-IF2GY?3/8a<c438ec479'5a!M7kAD^%!7Y(URIr;4pPfaFMb#,%@B$<8CbP/>.TFe<M#gGE+!f1#
%m#$SIa`0\$$;];OYptM!,s%3aVJoSb)8qYZ_/.A;_la,!"NoCi3h'!T)U1RX'-L'Y>Igp&Kmeg+eVKg[ah2/h.M.@_@.\]$\2Dn-
%68a=Y$jGbM!&?E;OYW=?da\shSYc^O:jjX":RHdVm;0bM^f)fK.Q>Vr#M_#_:*??d8XV,N?-n?MXA&6$<+(pC+\-*]XSNPB.i(b*
%:$78,.>I1%H)r8=3G^-l<ju%0G$(5k+[_f1m>44*bf`^M-[amGc"u,G]3FqS$c!E(a#*lA:!sW8l1!ZJJ)Mf;\GA3bD&<T__gk$*
%)u`\2&?'"K>J^BFDQ5$0UXkP5!2l(_jN)W#Jq8F`A)Z62%%>V0`4IHB=r2rOoHb;UcOh9R1daTV^,W?F?OSjq4tTMjFPo]A#D?qM
%jWoUdFC[3qP'`:dk_-bs`?!U#cFtC<<OuGj_1'3609LNn]*;e)Vq=>&[lFZR,5'BMeDN(j#ZDUi[\8Q,X$KRlT5>Q)>GtBeO9e=W
%b>]oX,jGsZ0u;4bLCXHH@\U(mKZchI#0?]U+^jM$^h7o+36bkFd1J?aJ6QuqODWqVC?]hWT#PQo`Kd\gEi!od;hMG94kqKcVDKiU
%@Dn1^]V:qu"$+Os]P8d3P]#@L+9HB)Td82ia's#tT$5-@8cW=Q*%ccOJ;p`.W)7,'S.GCuj"/E@*Uj6%9Gp#ej<ctX\H!'A8p=#E
%K*2qG#?&/nd\mij^'@`Pd/]>pLulKjN3oQYJTC<S)L_\3\H%jJeW@l^a9&Z*pr[9lXGObT^p+#bOdaI[K9T^gFRhk`M?q7k%3l=]
%=+$(uVqIU%%>PD7T1q%N/KK][T^8E.'Pj;24;\(q<%u6N,r_>MWaMYrW!nNNK_.Htg.]7qOp'_2@e*]kd]MH=Fc\]n2Zi6VN7XBV
%QEe<L+U0o%f\A`!S\7Wt+e2Nu?\2>cP!$=H&Jp`TH&\;G>V03YfU'*0(@$:h^@In(!sVY/&2CTONb8u8>*+jU2[3aWgdJZjN^57V
%?.q7KLi2\gUf&qE&BL)0"ni;5P3/1@=\Z?_;6X&$J.30]U_r*f/psS(37;D4cO@Me[_q9:l/Kk*AP9TME/7G6E8ZnnJTN.IX6,,u
%9b+&:`F]C&JC,[JG5u('0ri'H&lK^E/L.;@>W3+AS1CSL!89X*"jDVK$,Q<CkIh`Z1PJCnf*J2tpPSbik5cI9^4nmEQ1lT2Lg=W6
%(:Vub0MP(8i@YbEFB8"cE@$'L,akWb-A9Q.(,"DD@0>"PQua%r(s$?bqaFl'(<mN]VM"4Y]FA6j"p]mE8'RIU1^Rl'(-j5;c6Q7Y
%H.L?o5XlEV`:1ZH,e+j3?q0?[V;;"g$=RC=)g&fs&c*o4P=fAC/8VcOJ6'BPVI3hJLf6QW[b0\lOIiY'mI7(uBqBBXkU;SCB8;K\
%V"?Vf4L-G>>qAT@iWBsOs&lZo6k0jU'(ue,pJ"L&"U(>=lnL&RYQA@*nJrJc*b3+X\LU?Q6@Lsk_q%2*cj7N+r>!\U,F5Qc@s[ET
%D-+r8!=2bb-OC&h`>ZV92Jm?qEb:HWr0S.L9uO&![f^ZK\X>$p5eo*tbqg7.!TS0PA/e_=mZjFoZ;i3]$n_ni[M*\jAQBHc,g4P5
%,7qD[,j`8]A;%>L0B/86U'-NeL;BT,KHd/0!=0I^^2G.TBdskD[ZE(U)ke(1_ocL&MS+K*T(=)_IV4"t+hGhJf1iL[!0iF$)pVAa
%1[L7bQp#JY_+l__A=eBo\2[XZ$AKk;c^]=KV[sh%+W;6:8U0kTSYp>F5hstFN,j[lOp/dUbVUUCJ\ZfU=gj]`FA$V@Ji0da!=*!D
%3h,J,p/p+>i\ng`o<Y1t;NYIUaSp-?2H(e2e2'ElecoRm*E08PR%*[ZR-_]:>pX,HELRX9=5F6&);#Mq8GJB-3KWA-X+d.A/7t\n
%Eb5h-,Q)WBks:%d&e'j6^d^<cLh+0IDBX_Q9^sAh_?"Pa1<_HGLs-?Z%$PNERboBEG6gSu[)CaW6]m&`?rf7B3+KloOpSCUJ]\m^
%Gdk,KL%0mcl,YV(&43LP2E1^,_B;Zd=COdi*mtDKPiD<e'2a$;>X5Na_k8tNi`SI7elM!f;(;^(,AdlpN]<=%Qdnr'lkti3ZSfrL
%6]=,Q_FaYVJm+Zn&"bRASCqd'nVj$-aHP`;$QR)>U%;H^o.jfdcR!?93+NOp'oQA,;6!ZqKKr9UUrAfLnR-<CGp.o@1#ZDGh^'Ym
%>F_:'LXSk7'F/AV7,4;2ji`4,97^1!NcNbB9c0IZ4#mq0'rZ#<gsG$(!kC(tDLaiJ(8jFQ(\_DVnV5<h0.]CnJ/hiK^dXuaoF3U"
%dKmL,/r[cqi,iO#n3[:YIQ:R4!QQfANoF`p/OoH*k_F,pg)`IMP2G>D4m$tr;A$=YYh^-mCgQ6[L*7n/M6(FMQ$@aiLnXl3,E?Vu
%C*k80-Z-(FB.ATU;&pGBCbYY*kH'IH-*.,-MAd<YNm9TU3%MbboCK4t`H,bP9Pp;0!pPU'cA&P=SKm_5`]:2l9l4ltfWg-N-&iX2
%L7T["EjCfNU^$.R3KOI.VlnYSA7$;j@h1;m/T5qhY9s6g=qY]rc5d%^Qih!7`0r\!,%1<ljih@\6'd9EhUfWIGZ<`P,%@_f5d&+8
%"\qb<?$/NI/]=t(DnqPr>o?I^P%&\d""lXGo*:fch._Icasq:1@"8Dr]E+tRWu=5D-hN6NWZX3Z-VaN7/M/D/i\.25ag3>64BM^r
%M15hj5S;q]9.3N/MF&Ed25&\jZ/?Eo:oT7!*Q0Vt:kj:,/NJ.P(,:JM7P0#f'fFH&oqI6c6rPQ0D1'N+6Bu`r[2*u4"D/OGM8PoA
%D"`H'?hk[4=3h^_e38P#i[(lJce4QB`u''(b#dlJ6/f3KODE4g;u&P\d0?8rZn\N"&J#g`R(P.9RR!k\[Vp4R%[<eDIhTl@EG,Qn
%]*sMU\I&K$g'K-f+R$mbj?,@(g:1$RhM9N/9UPo20C-I@F`92maT3\MnAOY.0035pk#[-7d8gY[EGude;O4A\jhNnR-8_M^f[>co
%&5PQ]d_R'g@'K8DM7Ya;[)^EbdH)7_\4$sPPQ1kI.`rl_0Z0(u<JBZ<0.6:9#U#[Zq>i>`<rn-%*'ap"9I'hb-;8\n"GeL/NqY2m
%)U.3B5CckD<F)Sj02OEhUb@LX6l@dt=g9L&$r'lUWitJ"!6PWKK/ii4OH/*A7r28'gZb00qC4-Y&oK\s#DdVMmEhqVpl1gn&:T,+
%H<S[U"DY6YlH4Z4aHcp).=!guWh!g$:*4'r#IYW$NE-:r/Hs<j*_o?XO@5cBQ01UpHd,ig)_1gj&9M0-,eqS>5Hbao[65j<:5mPr
%Y;kJA@Su4U>8C$-Fm\[pR]eOjL(Z6q:ZI(=&B?@&;MHVcNo>Y>`L4qH7`@'`cK7ZLjYM]kMATep]!-grJDsbkQ[R?l_;fKEr!396
%6_OWJP.:jsWNjVQ&Ia?c(rZ-JJ8dMf>e#e-"0'#CU6JbIH$(8Q=,%(h;(Vr^B8*m>&TgsE>^/R%c?(;0UUq]!_E8+s\m[tiB)l)G
%'ols#ap+L^\S._c!>L\)NnIltX/S"1?q/et2kt.UUknAPQ+b8*C[sJ!M7C.^b?d$n$ia:Qr'VIOQX>n(Usc'B_s]i."NQtr/(m7J
%VN,/+6XT1?Nb4cj9bS7$'N++P>`]H;cQno:i$8@p_YHkk#l4X63?c4,Uh7G2AWm-?$-*fH9Z09-E;'AIdX`IM$3BhtOKq"4@LeQ:
%nA8&m$^W$"lO1.qH();d/!M5c8Xf9N2E4g*juEjU['5[=J./)afkc4CdPI\'6eq\AM=2N;<%7#2au`J_[7Jkhphbqc(c(.Q6c=lm
%`Z<2Mb>LnBbi$=AnKqF<;%HS<L`%IE=3(bR`%dpB,Y]%_$rFHD9&(@.H!Ldq'gCAbW,4"4*uBPt*J)0#%-\^oZ@u!OW37X3ZfIMj
%6c?4Y/:!?"+>,,E3QnU`_lg-Dl>iE'<(^O0>F7/al[K&C%4NGD%0]ODp;%/)pdMQ3'jdkmFgtSn)]a3Ibm,Q;S`YgARuc3`47j^=
%+QJj0I8TH$1DHCiC]sR(70N!W;F>8t%E0\794]0Kb61]GR]SR0J_h;hNJ'n0Web!*M%]u)SY5JI(hObFGM6dA4Ca(oj+Tf7&(Nh>
%'uQ._C]SgE&2B1]^7BeOanpX%fO[c%KV0j-WP,!;8E0/,&B4^kpE^I5Lh,MJ[OMF^W*k>J9&0qZ*Y]a;G=&\P5%dlG!0?#2@9NLV
%*Ep(1Vph*?!A)g&0%pj3O]FnML'+7UjFKKt0!Gk&[Q%qTU-6@cpM;NSjBY?g%lXUsmnR!J`q(s7Yeu@#VplaJ::$T]W0.f7Om(%U
%,R9T@,\>0jj96!n[ZH`DgdFZO?;6[?YS;HSK]4,G>tp#<6T6anTrHBV((-VWG3,BM5hH^#)=I?pWsE#\o]8IDp9OJ9Ms8$0`YSnf
%N35N8F_t-P!,:)]JZHM>ZEK>i:<Ts]qtZWuH^*3q1ZFY<;*;FceH0JM=cb);YKtGSZB\%sZ.nQ/@p^"OMHZ"F8c-C/Y5YhKask:F
%]5`osN*N056mm+Oo'BaRESR&Y[rOU9`QbY7bqqd(V=N'g8?oD\/iY;5;oC[fQG!ZFd>`D7Lorf%c<sQ6'mO#92sOj_,1o2kLk)W2
%[Q&WZf7aK)IaY<sU_k_1J[]W(dY!`!25JT+h!11!-1?V+o3YgjW^M$He&/BaJ=`W9)nFgk.maKEk#bDgc]`lUnVEaCE(N^n$l>HI
%S2CNm8X,XZ73f#ZFTULLj0qEqU0EpGcbqU]jiG:@)GXqCO!MIL05Z*FWt;7@bLj2=J2!LmQ:_t6Kfal93rGtQZ+r$45uou238`u[
%B#gE(M'5B5rq4D56:,\^6D)pJS-&W<<5gemqEY6QOUcX\%mM:?hI-u9)<#058VNk4!9pNOM9G/:U(D@F/jR!1ph*pT0/b:80+/"#
%p?Zm@8XLp(&5m89$"2#O2=#oJ+:i2'8r[s=r)oB'8d!ZH6W&;**_9[N%gjUJVYCPWE`Fbp(s4!LP[_LDTI^Jk8m%_D5V,M6KkK=3
%^&Tf97tD3X\@IiF$I>,Gc!8PN'ad4!gZ:r^a6'4i]`'QO"74RG=YE#YYpje<-bodJ"QBQKPm\.4\,]+i)B_3OhM87?cZ+IAb\g?u
%6aE`njX^T=aghfaa8^ZK0)2E%;4,M'YYc3V#-i.*"b8!+8Ek]p]m,L!:2%io3Pc>p"%H8@#80?GO;U]>8P/CT'7kP*i.V`^8/"dl
%r1S;2MS_+S!H3K6I2*k_3uK>m8U)8#^G_ngNA<ds7RuJ_DMA:>3,6R_9onVcn0DtpBO]Vh<"7S\m).EmYn0PEX3C44r"lj%8AEF3
%Xq>h7D7LudNo&f(.=5-9F#XW39df4-Giea`f^[ia8lTgE9a'-!I/2!Uh!e91W/IQoStSDcB`fVLQ1,p=LZekAHJoT+gu8>OOHKtY
%85ifWEEmrRbWZ&s_gct>Xd!H4D[(ViT>M&c1uQI+;+1b3.-Dfr7KUJ9Y!mgi>ZQY"2K;+Y#AQ[^hrAAhZOg=W$Q(f'X.:?5o>9E7
%"%pDF;r%bLi%F,L`[5,di,_P3GOR]saunhr5[@siMPEe6GjId*:Rhs7jfE=-arJCQo-:I$EfBc^kV/q<KHM9J1`HK)o`G6#YJW(p
%[1ZLq,%$YKQ.P,S^D-pjTQ'CqHDDi1[_hK2n2Ae*n\!<bdu"7)E9p^I\T65!%jT:u5od[O*CQ(u,6HlW.InKUpkl]KCc:4>Rc^V\
%(&7XY3e8H4=1;;&BmWHt+m+U$P+HoU"sE@"b@?6.6XL5eT>3b1O1ufU,ruK:N$6_Ffkfi\N;ShXM0k_BHBKZ%.C$sfiCD#6HuUQN
%R\LHBR\p`(jVP1X0qbnG*gWAUKH8:QWb^sUc<k)r3^e3m4VL:W!Nh@SFtT1/0foP-4qQ\UV5!lOn(LcqOr/l5$f!KY.^2DLY8d<%
%(iC5&SAe[GMbFgI)ans!K3rC:Y8s;s(dP+VK<'Aq*"7!eECa0.,i6`&(JA5k%MiL5D(j`fYY#gcd$NXFZ.1OAW8?eHaAjA'PQPqd
%&I'1?DEC)Xje4P'Qk[jfVeWiDMBIp\72@V<_k?L13;++g1Le+\d#P1!B7PB/lN7p$/!)@U;32W39<ol@UY+PBd<*$JAG;cQSYKE#
%E1N?9-%DKDi$DNt$D"HO!uBj`QmVnK"i\29hBX^$0NL@E>s.Bh72/Zc<@.eh/>-SZ5C9gb>"p*uoaa9+p*EGK(<_[jc42?DU#[!W
%@oK%t4HADf>f`grcc+tC9)sOjYbir%^-F/7%:Ka'!8/I;+U*dP1c,?I=X+`rBral_O<8(f5"DEsid$2k.p\Td1Mk,$`P(J-KT<U>
%M'pc<3^&`^Cp@2;Kd5:NaY15"4+>6eDr\Ta"P>9S'dkhgk;FTSc7e*8p!D'IV1Xgh>%0NBH]3I5"A1Z>*:`eHOkPN<KG-;,NWk6<
%nT-5a[63lVWRPIGR[j#-F:?ZYYq/mbNpAlsE&_jK5Gs'Q/t<ll'TgHT^9pFDhf-,(*g5hdUC&-!T)umk^m4+WIcSUH[#bRS8k9.X
%`>8>09[kacBa,jUqkg&.TsHLg7Kp=r,jLPH_e\E$IsqR>eWoqFE;6dO:[YbWLWN?Bq)m>=0DV@5kXJmRC-JU9(<dnHC5,VP:jT\7
%SAPl*@!A+"nj!O,8K:6\hScH1/nAE.@4Ei&]m."rI8g]Un_,X9HMmXI93hG:<ph&S//qJ_bVu=K)JSS`k(kDFY/N.3N^?Q%f)YI)
%eWm/6;o-psW4`t]ZGJ+h<+<.0TEnF&*\@n(cO\o5i?+8!A'm.QS-?oWLg1i2QRTT9Q&8ZDn]N,h%@4#%r5@/fQ"D1[pouc`C,jjr
%?#XH]kQCLn@,7"#OPD+OPDZ+`gVTpfm._b.152`VP,)]1/hHO%'^:``3^Sp+JHJ>e4O-DOD3^j7n!#h_CiZKs*RAGAof<>W9"$0o
%CFJ>C)a_HD?P-1O>RVI]j]"!=1FU.@`@2u.A@Hf"Xa<`%E)T#C">[%@SC%LG\D+9U8P6VV:'YCBa96TjV6sD2^qo*[_@k[$P/(W?
%*ft,Ed%(UO&C`Qp3Nrl3f$IAG7V!o4'kJ)"pba./AGd"r,9m::*i4Mu_U;8=nhMde2d'eT2tA@_m]4&3b8HPQ%4?+hb+H%D8K*i4
%+@Xc@H:Rn=)pr+/WciNM$6h@egp!u]9#8;Mb`54&-XHe2Z[)*'>k:t`]Yu2A9e"VMHlL7./jXrXJ:c13GAhI]FJ<R#R$X0mqD,$Y
%?:4P.fTF@R/FY?DSRg`qK_#6940ElHc=JQSe`<&";#))0hSO>">gHDR.Outn/pA:QP*&@+^i\K]B.Itp''N_tq?IEoPWFs4qj&C*
%D=C^p4HR')_a#4Y4HX/l#j3d<0dgFU@::<Yh?)F38Gk*=Pf6YF\]>,i)^30/?!I]E(M5aZ>oU?u)-a+'P$uKP:?5Xt[X(*_):0*I
%8u8T*QA.Mq`6/>S,@F](-B%$riO#UO2YT)HW"@h3^g?!ZZ@[.d0BLh_>aB0'VXZL!&;uYaoCBdB`#)#S,:sLBWZX#q4X="cc(h!>
%c';tP$C"+&6G/QB&hP(=e&3?2E?_:_k:)05&C7]e]f;\IZF5W1'Hd-Wcq*9<*(e]uEOB:2PEt6R^F+iRBkprc)X86m@RZq%9L,31
%!(i9^bi(@Widk/UON'N#"<<]:K=>$_Op,;oeU\_50(^ONEOPEn8IZ5h*=sGBYQ&Ll9)L[WJr,pa!GpkM+$]kd]IO2+kgY<LieMqB
%4V&M=gdr$K_JmqdCTA"$^N!Ze-!ETG9QTDs't`J.N!ssP`&-UCiKZ[BXYYtHr3@*)9p%h4Gl=H/!>c;6d8)aO3K20>8NGf@mPdl*
%]qL1?,@>cV3ee!aRA^LH-ZQ;c9,O!p"0_s5I8gC/kQ,Ra#Z2i^Sp#(-#7$+T2Sd95Ur8MXWAe,@7XS*YCZ.j9+I#roA5EqN)k_q,
%`H=NZ:$8`*6b'EHbQclYUTQpe;P"-=8%^C8@M/qIj5DO*H?[9$X:@jPF'i506ZW-BY#<)&KTgGeC,ki\La9O:#fM>;<BN%fcj:5D
%$\Uf"o@!hH<VY,RQ!f>c%`c:X]ZGkk_r2u)I&%O-AIdmZ8Le9WiH2SCH!rL]$PJ=LL\DHi8[6)@GphY9.YEAIS>6:L]Ja72W[*2-
%"cX`<pXRb0Xpc5#'h[ipI+<eAZ=YD&SI&HLnj_K?4Oc2JZO:JNR]"$i-;tVAK=Et1*PKWo.9']Xr%JX1M<Np^WW4Wc3-:5d"nt/-
%>ah1/.@JPQnB:4gW`#4sqSnCL^>-UoPt8&^c;i<&^mZYI(2$kX2a^kY]XbGFQQs"Tr^n5\mN;OD:TQkU8N<Xkb)Qg)?7&m*W4YK0
%Z#QF%n0-_dSfROSj=LMIpcA:%<?.JMi6,V8I[%m(NtA*lT3S6f5okT+Uf*/up/P'd8dnqhfcR-?<5e\")tM3K4aC[qY[k)U'*ESJ
%5b)TPX&LV"='d2o)ar4Q4\=Q=9ISSK!565&"^^#0U8jnXUXYWb"+k;<o+Q"ob>N;F$<O%QeMZ?/-,4A,IDo%B)UC*+pq&"MRmEK\
%(o%!`'h"^P<7-qlDQKP4;Et9Bb46ql_>ZKe^f%^.RN]Ws;4rraFp;kV=W9Ut-4d;I^oCDZ)'h@LiR]U=AZq?.F<pmCdsq2L.)/jF
%HqT8.WL"]Y0Irr[m`2#]Vd=0qX`2)XIOE;F:%5gBZ$F3I/bNu]`h.gc;8KS3ECHV*$/[C&O5f8P]1)HoSC(iM56Dq).gQl1HFSJf
%4Jqc#j7EAN+u)md_DZ/m7uYH0jI8)5`blY(fggc(``Q,)RDf?EI.B67h@AFc\gVr;KGDm3cq%^l+[RfBO[6cfh[m(e'(\(5*>T'"
%H9Mqdk70p4=*N*0Q`]a%iu9jlq4a.*d(c4o6k9*0IN+c[?H/g=-d8l]@`A!Z616kX?t<2gPI!Q9C@O^$>`]#j3olc8\<INR7(aCW
%3#MjAbZLnF'GWqa3MQ4!(DNgk6&?Anj^jQb/AX`@X.=lqkcDQC$ms)BE1&CmLLq^ma#*j"Z[brj?UKB_(Z6bq3)V\7I,o&Kkh',S
%kM]BNKC9SU!/ki%2sP,gqWdWDJ8<g6%`3-@Rp62UJZtf_k2ZnN:g51r@LVWr$pt^PiA/-c#K<qr,rcJTED9fRK&Nmj:jIXh&boJE
%Crf5CmD:PsI8sC4eUsKWO`&5[p_jH$YsW7N.ClI/-&Bf6Ai.@ir7DkLcT-o%73JVIL]>,uZWWP>gTGU)TQd?[m239gT+rk#RaSVQ
%L(-&n(t90e]!rC.F!^)i)83`Tqo2m'EG?S\D>DuP<Qu2f1GWFA\`V5*@lUKS6'Z8g"oSkP7(D*\RZO8re#Mc[&)^`*aTOX%VbspT
%XP"d+X"3^^)!mR2R&0oeZBSm@ikkK-=ZsKHoG7o,s-/&,4#4;FgB;&cLuEX4[jl[Ic[1@!jnXL4G"qM9Gegqj.U"b]i<2W>a4CH7
%j@aNLWH^_Fd=Q`-m"bhL'7LV##=jUn9pAQ8;$/>O8dN6Lh>4(H.)W<ti7*D@Q5=6e"QOQ'2@m&16oCqb!7tg:$?r%n+=JpT>XRrN
%2O>+IiBaj=0`LEjBQ.%7g`=CuF)AB(!oGQWJ[M'qpj=.=42ep0QHcWVi5,/)lno++qK?j2KZ">mJ8GO&d]9YAOp[.U4+e#nG-Vnq
%QLDoa^Qm5B<JE>7q>uP&P@GH%hTbqA>s9RRo4P/-:smH"?`E`rj^<A)C[a)4.nJ\k%q0Lq^RrstW1K0DYsoT+/JXd)baP!o/X43n
%%#M75KCX#bW>VdcE!L^q@nKKAmjBrhRYkul9gOi%iu%Q<r1I!-+"8MueP`hY_L]$hK>h>?;SA?<%1lPVq-7$[<QEI(8<-A4N\l6s
%kZN1S/%**j=D"/%@b("<HVlo7*[3@3TO%<\1PDhL.(,fNpF#q(Q+VV<7K)QFJP3ZFqlGoi%%]#&?%Y"T%+*(,"d5D8(oC"qnih;;
%R=O\RV)K2:5dlX\.<r$-6F2fu%jaNdC9Td*do!6cc)gQT>h23XMCZJj8R(X3c_=Jbjd?J^]oD\BK-dpo`QWXg"GYL!q1Jq=$;6-<
%Od2/qpp0>]_Tt*:<">d30QKkM<0<VKVNX478?5fP5m%\2+\bC1?NT<A3qZ??oMu._RE!33OG=`g"J;X8OF0l_#q:eVYr/RPlrTf*
%?m+pm6c'`(-X^i$]4j$N*o6T>kZg1mMd7%_fqZ^cHJP4F`VYPpM<?:p$"nr#k[-*q:sWr[].Bd@$%COnprcP/PT-ee^_Y0ch_NGh
%cD\6nPSO[cQ.6=*9fVV4;'^MN6sW=DIQM8+&MV%cl5'/8]3e[c6KiNI/*>47i:@JV2<K^ABTg`u#>pU_R=+C#l4btim;e2[5Z,52
%ge1V5Q+BN@&?9+1m;1fMU$[t81`l%:=f;s@`cfqt'->C$5!)\U%KNIG9\r7h-dH]Y>bl%mI&QNo++(&>F^B*Y+NmK5>^hANF\gIe
%\6^ksT&`Z</0u6%'k+0/-LaR5GE1J#os-e6MYFaFgp[g*s7#soSo#lhS?KhjEh?)(==9a-<+:=A7p%*R6Y-GM<cY-ld&0^DE81,O
%`+m8u&<bN:;:rmMlPLZHq!Sj,jYKFW7>TLP@R]#m2'PX:d'k^m=c/](U[:M(8a%5)TS+:'Nk5W?SlEVgB/?H6^M^*h[2TGI422u9
%/R#q^-.K,XAg\Nh0'HT+-#()S(:MlO@E>RB^l7@=HS*Fr%*/Y2e==+CdY(\.<_QXe7]g2bE,'$HE98^T#]30p<5"=Y#AY@PDjgP\
%0$I*1VFN,kEUgLGpV@Lr3sL0E)8.:i7,'kp+CT(ibM%phBYGqH,SB>5g\*g'r0PNdmc.Te/hG3e(8Y2Yi`Da"l/S"l$^L#J#P^($
%9F=i/?WlI?h6g5W"O$QpErE>AZ;e@X6Qcb"P9BFsWJo0`/KiQQ8#Z].'U>p-?AkT56<LuLF!;XMd'7UQV33/84<%t'U)#&n>m:;!
%h_@:?;A&j>4D8L9?lm/$=*-,Ull?WC7C]X/F94FB&ri*"'K>nA7aB?.Lo&J-?`3lIMgjEE9'>kTWfb2$\*[f+6PA`.`\6X!,&YR4
%V&Hg]ds+nd_(#;?;qca--Z02eZ:'=S7]t>t<D?4o0%.E9.1p>Z$X#^YdPdG<)N=Nm<-cZDObUu]/Yr.._S*tX1`==iSWRNX[p8R1
%qf'mi>mkuIa&Fm+W\9_eC(a@_HW(7B&R]UOk*AdCV]X3b-]VlI4uU#,iBa58dam+j`t3+,.O'q-Q'*c\n]oqW8'OjGT6u'Q0r',7
%Dr1E$/]D75I[F(O]Q^X;mB)+:(pqI1J.6_sfaW^^9]93WRa(*7"743a4'T8@%!#h>PAgU=(6kZ4ZIJVTf.kX:'*qtdB8]Ko.cMuq
%$"P$BOc1iu]Z+eF\hHk5Pi>O\9#L9<`N`8;>o/O0Oh[Xd^"3I_c;b;>/A98I''V!hU(N,,bKj;u(F%#nkM>_.XX!SLQm(ZeV`;6-
%$6=`*SIiu%k%3pT$I,uCeIJ5X=kcHM'V6rr2G5=k5cC@a@S=csm7W,.>J0OS_gsLY<uig),CGd00u`fA?c$UdKHtuMMSrfm[CBsN
%#5UWJ'VWkOdY5PkJ+;uc1L-:hR7iQtCcg`#'GTJa+\'SQ5+BKJ(pL=CVHEH&'ZnU&!-XUH<0U<oX",=4D)VFJQ,S=7R?%-pUN#,A
%lrNFih_8od)E(6])/:r+@V.#bBRe%cLL1[m\tYa7/W#SQ&L?*aF`&IH'<+?Vr`f_u5;%XdX3$/_D/(OZKB!`?f_Ac7S$SRTn6FC2
%Z5/B[K&Vg'1+.*K-K!-M$=C7Ma1B'n1M"SlM<lnQE,J*!ZA]8!H(,fsfaAFm.jNe`mQGh8-ZUMu<kq.obs6Bgo$C$7FLI/2gBihS
%c=?CG#!J$k#:<kYK,rHZ2=,jifF*up2d`FPkV+bfICjH3#L&KVR:-m%@2Y[u^qO,C+`S^4`*=khALi'13916@831:h?8782W&1Ad
%&o&_Dl-lTr.kJk`bR7#`o.p-hWRuhUX)14^c29Gm4hU66EtjTn;m=s)TjlQQEmR=u3;#h'$>\(dpb[o^/]Ir$#0E@uZDE7;Q`Gjh
%>\ko;P>9jLH[+2.S$g7eR`e"6DIm*G'Vn#8524RAO+?+'Bu8SQ:23p%GKJ83XF;8_l)6^S&ifC9p/;G@5J)[N"_C$N(4:<!_&&KC
%?(fY)11GcrQ0[.,cXFN2iF-6<=&jP!6]KICr];Wp3mXkY??N&$C("59a-`6kccR=;Yno!JF0BnsUuFl-oEnY4bk\7K3ZMrDID;Mi
%1:d.F8kr_0$KnY3YuV>WMFB"m\ETbJT?]cd@#Zp'P\&<M(E*;-2=!W5Hc1S8dA0Ta>put9\VIu.-%m!Jn=s-q[hls)=q<n;6nQ]D
%/eZ6C0r_56&)5grdoZr6ZIk">6TcSccCk$uQVob8nj/saY*1M(a..2$`+d<3dG3$p:C$=bDfO(3d?1[3`H1lR$oh8G/M"T;Fpg=k
%=`BQ9`>I6E<L]eMQd_54P*l>I9#o$A>+<t6p?YgNU^h.hiR>UuKp0#\/PZk@GLXIj`le.*ArT^qle#VZO[rl,!6'F"i#id4FQOMT
%_"dN^rU_-kY(;TfM3TE!P]?gRKBp=W'a5G'E#HQr7b/uNW^Fal_DcS_aEi"6^`4u'N&I,E&@1VReM\O$Ou)+JI*?[2oKn"jF[2?a
%7thAB>mIEi")s1Bo[0>PJal\(^I<ALHd2@5f7CoL.PtKQ2E\-n0LQfpIe:f6]gjR*)9h12;f8JtgIDE!Ha+a:d,*@KrXJK\29<#_
%EC0$<2e\bSJp!WT4lo\%k_Yp>O6idRSGpX74Aq9->N*0Y(k.0'25=T%2mpG&+/?Un.niBZ-NbF@F_7Nm]9WepR-[u-lFX-__IF=:
%@4NZJ8"I]I^a.Ge<gcH:A.G;`^]3Q:!0aV<a[aC*#j1`JIJajJaNIn;EZUYlPpdA6n7ieqhQBbW+Ao!e-r<$^RfGGZG7dnJ1fEGn
%3[*W`&-9^UAKhY#9kQckQLJBiT<3,k*+@Y)mPG[_$9!H\=$VQK:YQ+.4W'alhh#kZ!SO2\bSE0cRc'Os&N&g`OmBlZ5!.N?UAApe
%mB=[[=&u^80noDE^+7879NAejHe<)Gj0L_hk5cM8m#rja/CG"8TG^H_V-!eBU1u.OP^>;W'DPbZ09XA<>P\23s7I*aTYg^>g&X#R
%19F>F7@gJ45sR&D.R]f[;:FI"NT*o=,j5d'KBDpfqCVQmLIf^Cj&`kXTAqFOdGJ?Mf[<:e`L$VJpI6ueO*Qosb5t`]6^1qmH6_Zg
%X"dOM"-m?!dH:.ba^qq`D`H@r@gg!0,%D_Dot]Bh_!@.h-jite/u:I[kXU]3@TOndks1@[jKF+tU,7L:;\tjRS3*=g_Ng?04rW<X
%ZeuB&@$T%VDIZ;jMs?cqcd,M%oAF0g!TH<roWa6A:ccp@8<&@0Fd0pIl=?k%<M=Gi[&!8p>$CK=V4msj<>C_f$0bIqeN=W\,E_)%
%XFhhHKCnfL=r-u@e]@oM]`"XVCgKqC_M.&bCZHS<Z_T-BhDjeVQnhp)C#T!e`k(rZJ;QR4'EURC9&(@?7AP@C,9tb\Z'n^lP2+40
%G>bPQ.b7'`o<sTKU1/3G5+&A&iH=,%(dCk'p&9'K"`RI:f$@f>A::#7R)#//AiMT"B-?G&4,dpB<i9t%MtV05dP?a[(`3K+e0B\0
%<s,b/)Nkg$-l@^O@lb)O2b::gY-J<KT+t+[dp=R&9:?i0O,7E5R)dP*8i!j5,<^LHIQ/\nmDa+f/CG`f3FJn9.nXqIY?l('[rAc0
%A#ei,)6QQphu)aCCepC)G^PP$P^.g\6!&pmZOCAKl\RQhQVjZ7P]fY&#V\i(mW;0K]gRf`Q,cl:pr9?1o5BMamJMj<mF?mg[mShZ
%</THI@][Nh%`=Vmhj:`2UPp;%:.gq2;:*ch<3grgh)hs2:24b(;WPoW3]l*m;I70[W^$++#GUne;1^J9KAXbAN&`>@4EGp7fr*%&
%,*?`3o4_ApjhjS3O94&4L;0&)qJN<Ided[<&FR2$4\l"E[t=dB^<]<N$0D^)G3%nRhc1p]J>0=&Q0)4(<7T:/2fo)*$L([R$eaf3
%B0ZU$aYS10q!:"2&EnT%;Yje)5=_lOeEm-\Tl#/E42+csnK.WWd`aX8c'%S/hY1T-:N\Z#R$X*$BQ&.n0i3A9o\@3'^DOkl]A$?0
%mE=lUd#q-.FoS^.W9_"'Y:_r<#64O@Xb?\frn]O9/Zs:`QTFMpl]';hmUGaj=8NJadU#qHCDhMQ=t*eP=tb(uXfD82?crsq@%Gn1
%Q1%Ccq6cZ"*XbO0^?XrRjXFHG6st&[orfssq]I,qD7/dc_fFXt>AkgWIVmkYm-safme_puoA<gbO8o6Yo(D!RY`\a4"d0eJ0XA-Y
%.rWH`jYnnYQ'`#EXmQPCdPO*<C-mDknV7.o(X%#0jCNYQ3B8G30C.>-RecX>!(8m*qpkGH$.##sqK7F,eY\N'p_C7i?'\"Cgs^2T
%/j!US3:;:>?L+lqi_/MudX6MHhUA(\U:Bt\B@RskWfai-@>X]fTW&9UDak_@.EQ5AYe:W-M`nY@ehEHI5<4MRp_!78K'6\#LdH(*
%REY+,`&o7l;X<M^ahRt1A3nZ(r$+S&MuZ`=3_tI!K"BLHhV*m@mYsj177"am_VgYnT;I`FG#%:e)(4L2mn:2b<6jS7cFctVkr$%^
%?[n*<T!nInHVLm7b?d-;itIr5^OF2=bdnmErE;_te%E;a$J]\`dd,:$b:'ROT<TnCI/!:hm\Y;ApWr\JhZLL4+Od_&`:<Ja8?\kA
%K+)()X=%sfFi_,]6EdW&1!+LkNFVPA[:OiuZeo+T_q-DY3gA:b9CVsQU+\$G/N(%jG)Bc_$8,0N3oJb&0Ap:'ibiOWB@T72''H+T
%#%6;sP&:@DVep"'ot$Q"Gsp'CL_afClTA;FY!6KVhTt<WSTR?(]5D07T5'/"/pk5/&5M*ohd&J@)pdXE=2B'pM#"c*cJL!8>3>r6
%]eN.@!WOHH@>$<"aqVPr__+(Y!?gJJo,_PPeo9ojcLLi1&M%hD<C0I'Wr&I9<e4)-=jSOCKFo"j#2Ps8$Sd[LmHuFV98W$GLIHH9
%N.`(<g&Jm-A85EUH5;m"&Dis'Cts&>5AEXW6<-@i,3Z2Hf]Na^D$_qRr2O<gj$uXhfLe8XkKc+sRV?LtM5MQLAU9"2=.JUD65igC
%Dp1M"fNQPP_7'M?2i?U,R')f)22+aL;Oe2R!FHFgWrZ#Xi2=4'FZ>*n)+/]0/0.I\eQreMK51N;PHCWkHRlKj#`bAMJ;-lP4FIX5
%Y5U1]NmS:p67rHrndTg^d8h,@KaC)e[QRm=WSdb.d_X!4CggKk`e#]c*LNNR<uUO`^ITZL5(7+E@\Ve-?_j;po?AlWYCS&W@;Wg%
%=pN#4?,K0F5K0g)ds\A(\uA^i)N#_2I<<Y8"1$FM#<%[Ak:"UpaNdeWl)?Y>.$L5FJGEk6Au`#2[I:XD>@DHCGK"TI1U%gc#>$r,
%B.:"$`(*Bja9"S%[):)JG!*WEI_TjJ8b=?n]J#&7OckNfjF)4g9[udE3>U#u2kK$LDi#<C`;]8a"U=*=r"A<@.J.1_69iD+Qpf%O
%l'mPMn2oTGNt?,)6]T^:4=8`7hS:e53FJ;f$]oj#CJV`(lEgg#)Ge;4'&lkENae"[,5@6H,;i87:<`B/gZsJDof\1P:7iIH#gE/o
%*BC%H[Go%WV9u&poE<_$-sL#T8$mYfl-O>bDPbfW*ofRj.IPs4`7+j8?QB=-'9ico=90lk3Jl>f,$,]m9BA`W9^eYrM`(W*.4#ru
%@Qh=(b[0#MMCoP>KD1F6?j(,)G[`n?S;$\t9i__m.CC)1"?OY")+d*57rCDWJ0<kWi@icid<rlI4G,*"OI?kC4i[QuAb&+q;>An"
%7ff_H=^8fXq,'ZMp9gKA'cGmWJD3D.drb!K,@tmhc^/b7QX"?VBWWteWgg4=p^q:^Cmm-q)SM7/q&@QrkDJ"nDd0EOQc<$hQ?CZ_
%/K)k-X&\lM;.LuuQ07"[*0\hZmh%'gEFZtA>l)cBs33K@V$HT(+n$\l!b^[iH=>';'in8`2NOY''>%0QY=5o]9NTI3Q*go,jH5#e
%"eC3U5?LY*i>,?0'O]6SQB*44a\hpICUh^+Mf8SXLQq>aU[F17&H*Q9qN*"S8ALAI2_kIUJDUdr:6QX08RUY:d<fO0>fVJ&'#.u.
%q%9[hcr^gX"LeH?gjIg'kP&1;o3i%?N5gJ_3;=d+p%+U>2ll:NJ1>rlp5:UBiA9(r-MSW^LhP$oGZIH>aIh=N2EW]a=eEn&/?>M9
%;K<WImhI^i%Z]SZR;0Q+3oG2?<$J>kE@]LZ`TX4cjF-GXp8kN402D"t=Sj)!4\#qk;mnfr+)=7A745H!%DjM02=.&UbZ@pZiWc;t
%h3/gJ1j2n"YfCjIP&WF$9ZPl(aRTr/1I#Sb"[mt,\N]^B.Eb>,Ge=HG.'SFXn%+AZ>QPGA=_E$q@&9N6\S;R4O88O5"(;`!`^d,N
%ipD<RUC4/"lT1%fRsFqJ"A:R7Ce/P!jM51Ug5@@R`o;(,3Bb:F_'@-%hFi0a]5[nuA<2@kg^P80G0!^K!G0GLg>m$OPe(/Z\#Y3S
%]bEd68R@Ydhs4F=7W"[8"(>?4VL-<U/C>1@rUb%_arYhXP]MnlFpP;L,M$R@_.fb0_#BMIkdHa?D7SP5UMl#/H]%I[@X;)bP'2aa
%l!GQ7nT7#=1rM(<9qCX67>:b/lfm/+N\hA5@TDI-F2YaCrG><&Q4cg.$esM0#gID0#$r)Uq$(;Iccs4!$,ZEVWu+d6/F40_;Fq<r
%*qIa#QLbiUDB0UkL:kc@\/:H^3)`MElSi=(R-QmWMo;3/:_9LO`0t/XY3=))'jq_S5iN0[jfrHI"d?kXms,fAa2aRt]m6N1hnt?$
%5rdgSkY+WCR=F"W%o#J)H)pH<C5Q42*(rOuI'G[<CH.9&3YMfh8]g-LeT6ZPO7gDsV$*V];G3H_T&;=?ZON(O?c0nh[CNA'6JKSX
%\#%WJa(=fb['[MVm!:iA.T16Ck#@GN<qQ-tAtm2fOkEcl\1Jd$?99AEXk!4>UTAnP-!".A[oU1n2gUtm(T*;3K=l4iOTu!aP[lS'
%V/sA]B?o!lQ)K*Eot;n8P96nr`U-"GR"D7k8KG]`#)?t=<@^c>!PbeJ4n6LYK!fU`S+Y%p`@AS5d+ZPhZ%e/fF[QE6i3oW5U7>N'
%O=Jbsc7pBud]SXseR^bp`0V4pPdI@aN_R\.nE!upgq)D:TNN^r\@5b.!ZTNTZg,KW9cGLGOg1S"-lnGX3JR"IX@U,0\7eQ%7+bM<
%/0/LA!^99n4TCq*hfunWo2[W]I$rj/*L4(bmD;Yjo5B*dQmEAq(3KpZgDnuYej(N7/*QoHD.<W\!(hb]`6e4ZpT(;d!oDomq?UYD
%X#R7..V/UV*\62jYAol8Un"D&$I-f&$#`C7\;(mlPfSDSebshi&YJ^kl!N:_@O<t!\H'/^TaNFW9IXJ22@g4$W<RG7.puI[bAB8O
%i$!Zb/#6,cktjK[HY.t=(@M&<kks_W<(&R*fOG8Q;H([RDiAj#?mOVE@3IS9*Q:@!eW^[AON9*hRTLTeTKbV'%%jE58rM5`2Eq`=
%i<J=P1/RrWM)V:V2^h%(MUn8[M8u#dcFVXuXOZ2Rkjp?:qUL::AB6\#-a2oLWCN/@iE+V75,*m8M(.O%9kOI+g[M-*S=Ja(S*3nR
%oNSH:%HOSfS)#1ZF@6\PAs/bbb+Q8_)FU:6N`^]kL0geF=(X(FXZFIVhp\k@o%6W\aaD=5q8eXh!;hjOfGX_1fLe[B\kT;DMfgZN
%"obZQ>M??Mpu$VpI2`i/](KKXA<JK$^ooB7/(MS;N[_(]9l-j(9[73UMskdeI:UJQoR,MTRa+ms*Rs<$l5ZKO1g9T8p0i#$'`Ctt
%j7bRK"4YC!5?Uf>_WNsaXT-Kj9Vd,IgVt"AaaV/HTTDnNg!=B9Vfd&ST01c07_7K@7\q-#+/A91OV;50\q75Eqj54E3oZ=MKtnBN
%(`L0[r1a%SqI#Q)Q_X'2N1pO1:,p]mL29MFO"SBZiC8jspbIA.<'(N4J-,p:-p[nXl?g6'?HV+p*Uq46DlKb=.C?a`=_YJsFDG>u
%-=%DT"l?fHm[#@4'2+Aj*/-T8P?<Jn'LZg!Hq/F-K&k6P=?[G</jb+[ldA:7#?N%T,u^-8`pfU4O:JX)_o@k-Y9d/*p0W*g3D&j5
%TQ]:IU\*QfA[b[3n9VFUI/gZn!KJDpr"Y'n3jp3#IT\`g]6P5Hdo[`9Z:_/h[I,KIZtGkWAC;aiTtKT&MlR8Oh_QdK4,p%K>>mA,
%A8WhJ==0'QF;_F,?l@gNMS/Nr4p*@j-!]4ucPu21gN-?A0NQZ%DY"^X\P/'#R\9.V(K,!h+T5ne!NGpr7Q"*a902D%HM(HH6QYf(
%apspC&d=<R];U!SHo=`f372jq,,C403$Sfa!g]jWk@.S>2OS_6'd1l+PX_lP;?l9th6G_M]&2B+VfhLp:"qm"QaRi7\TFN!+WpOn
%CBiBCCKdN,0@S^Ql3nYL5AG/h9ll?W1e\QuZ62#AD2TX:-MinJR7bOqk&ZVf[l6\-U$RVP4K-@5Jqeq.r*;Gr[G%H?!:W%l&FBKr
%/,D'HW*oa[0TA*Jf7csGQ2q,?N5/YoR`5j++b6_c7K0PT5_1gp<5`ft%ph?>^6ie*rXsXVZOnJ]"Z<?VH(D:=5D!]4X(f-mA$f+#
%E"Sd'QFV&LB/XXq*W^-P,Tbu,cj/Db\VS(adj4L[UtXYf4QfbJfWS".JF#?.R[5JZAm*/)?7M*t;s$hRG%aY6<[8-R4`rBBkIP1>
%Y8`E_?S/ZmXN?t+,l(&NMk%u+lUu\PBO8p$=:%+T:p<KYIJ>XZi;qOeH6+6^ag#)/q@\>go3Q\>XYN;6'5M2]kcu-"!?Sso,O9K$
%UYDr)-']I44-7hr)Pft>#)lC!V)u@0'(+3_h9QuX)4nc(Z3F(uNG%bHS^Ll\4oPnS/sbO<GY_7I3/=<,+`Mm*-2J&NV2'tS$Pg*M
%&t;LDBT*tt:q(T>7Z_'f0;k.BFoiWg-8LBi@2qo8rIV+PPt%bsU%2^a\VoUgje>Zgl<DQGD(X2Q4Yg%Bs-[lgQ4rIuj%-(@AThsK
%:n:*2k!<GK>3A<JXXXk+q<hO2-@_A`3_*%%/_+n#m'+`IZ[WjtM4O\p'5l":`+R[GA\MI&9("i[O\O%=WYB%uUsjYr@PUqk<D$\+
%T]OXAWBs!sQ1=R;Ks)e\X/#6sDN)kF]4*cm3`N"iZ)-tn*4,HrlJs)$6nb$Z^l1ok"YEI.%,mO9d0I$8ZRcJXA6T;sY>oiQD$o.Q
%2qI"6>Msj[9OD_5kLk=+jB:^g%',&1>J3S"[K7%@7B=G+LX/p'?s\sA"&KS0WI)>]Dh_7M-*>lGKC.+A8(2f8*=jk?ila%W]Ap\`
%gu#=uEgTL,F'Wns_QRjG^LgNR^m*Rd!lIN?cD5`.:H8U(FtE8?-0A6t[UOYs,'p3g:qR&\EiI:?Xm?%Q.7eXV&QR_t0&gaj4#FiQ
%+]`"/;&5mI/s:Cg_]V7/P2nA]idep\o=>L'pQV(uWjoB[HsbWR>Rc5^(q`W7;NNm+k>6hC.>IBd/EfJu$3c(_OB+^WHdQ$gk<^BA
%O#l+M.[_g!7W.$o"YA-&^Ta]LN`rQGoX7-=lQKKbg!4cUDB!`#HnFF/r7\^@+SUi2a&WpHK24BZYk_=nel^RsGJO/*"p,C8/n#;s
%H_mMF(Ab=G$4ND(A,Qs\6>CnZnA5lZgniTTAXe9\mNN;kO`5G)_.1^)]!O_$O^4>W4'Z$Jr:2')`*8M4eWNPtVUS$UM(u%D@8+Y\
%$G>+ds."]o,+KP".T._8"/ig*Z*`Hc8ej]S;Wu<TWWKq/O2Q=+C3j1<#)MJ8G^3"l>Tr\ZrFb04lm+gtqU2g5k^h`n0(NUX;SB*V
%QBcO,a!=U:<])-u>H,uPZI1&scA?iEikiOHp%i__e,=W3es:=m3F*(9^cX"Y(`mBRq9]2KhmucC<h*b/U.ZLResY/5l%`QA3lBB"
%H!N@2))MrS\cWV&#h'\km9:<lq-%&5HTF24R2Q8+Hjo/fhM]alr'>X%1g:CkpAq@XR4@ZK041Qe81un)iCJP4UjIZKK8,:k=qa^9
%?ZY!sO)2idq@+s;c&rf12C-K:QF[B&mt.Na]I,WA<lgElZ(9OK'S!>dL5#9:aE0T:F_PX5Eo9a=A7o`sop%[&;K%kY#5na[H$r=)
%V#nKV/dNp0S8B<]!KR]=,H"rOq:gU9Ok!iS\sTI-l`lE"\a7'#l)b214q/\4Y"7"U9'<GF>,*%$C_nT9^FV1G;]F]QbLq=7MI34Q
%?O,T*'W+d3.&ucL,]CC"pDG4i%16_Xd,LR4Mf$g/iZ_n]fbM.aMVIfTE9'pi'$9`r1bTZh78B_X>Ek.\mhI<*`F\2%qD;:0<cTHT
%([%c04a[>?@!8GCn5*bb1RV,/PI!d+P]/<:b^MG:FARq/56HMtB&^-NktO@VlbZp/KE9MN*idY1[^gdT5Q;b39(4J8<>jbE`_[)Z
%S/FD.Q?M.@Lm.2>/:8mWhG^/tZEB8pSFJ=fj*52/:Oe]*J'TkH!(?^3Y"'uYBV/mBTN?0+0ge5r_,VYDPoQk$I:/D>c,sY!##I-D
%,*(c7"h["=Z<[IQVph4ah1F]S^ufdn]j@eP)fTKKJ6ab!W#i$8k5&5b6\Lg,95>#K>-k%i0?*B$@Gfp1SJ9/@?Fi:d<E`tA^b*=\
%O5ru/K\]kR4C%tdeSGBtdDg\QdLM*%dI,h-i=2!/Fs#hsf7cBC&i"B,3JO'>AM<=)G8WBF?;&rP%-E:Kc/Mh/Jct?VL_gK9iW5Z>
%,^7K`F+SsgqZVFJj&Pt?Ms$ZNH]?J-,D2f47"D7a+[nrb2jKClk/Z3EW\1fdmP$eUKKnAs^0SfZajJ7X=BAcSR2Z6)7hqFoAVl);
%2$H2%`_*Y+T%SO'KiRS,&GhhkY/TnGO-S1(-&p)(8"h3'$8$ghq1Jl<Hr_s_S[g<:lpf9obm57,Fj\7Q&]rXkkn2#81g:61?+<DB
%3gOD4o&"MZC`RHMLhL_pg8@"`n4+&Wi:==0<QE(7\uN-O%gTu36VC#MbhG2X[,,`[1iKo7CM#"Dd4#um00el*FCLE\;$C>]&FQEG
%Q$Y#Z3*$;b<sK:mLi'iKPs2$s\>6sC`(\.g/JAl,\t4]PM!LRDH(O$G92X*GISH7g)K_eP!*dI?KL)12$GV8E/$]LWJP-8ue.Ye'
%k,8cph*'mST'q&d)tc(6<HJ%'DKaT$+bLZ\7l.PWFLGpD97jY9I_mr7-l^a]rZea.bmDV.(/#@=k:SUYRqel':5dpm7mL%p9BUJq
%/Ee<u!+5;U=hJ\qZQia)^o+%/qpGLc;IX]=>#%%4#IW^9/Nrd2FY:,ZQg'W`Q#e_g]e1QQbV?DbIEal9%Ll_+nfi3ui5;J%<7tlK
%bf$SYc=HrYJZ_+=N8WRYQjZ:sN"6Db?*s6[9?l^Y\H?&XWQO;i?(uRd]2/P#a@B"I83$F:%\[VA%Y8rQ/^^cNCRC*anqK67_UJrI
%IS=C'`k:IGIO(B9!d^E<pqU=<HJKMl@k!h1$d2+;gfJ=GbRcqT%1ARsNV-16-F/>V1_IUYfhD5A7h2p!j>LIVZsNj(2h3?;:eLa>
%8s@#*Eq"n!G;U!U.q>'a71k%V0@fog/D47..]4jT5>.4)W/4C+$iIP:9HkU?Zg?obgk_@\X#"ZXr/Nt;3fQ^OgmD4/SsPQT)^YYE
%@=lPu_HoWpI]_^HGj7o"9OpSLh.TQCqeK'`J:5/+(SGuZ6Id>gP=HWBWqsDU0rjl.b@3Nd#jR8.pk"*#\*ZM8EAQFCer$4lRXWZS
%>p?"(D4eYe;')'upA6e^o>`f-qY>o]qPUAcpITRP*Q"7^n+#`9gL*(/XJgsgKV!0(VdLa:LT<ks=P#p8KtTo\Od%Gj:TOd'=labb
%/T$Z\bE[>gWDl7<[R?sG>]=F7#&0=*`+p2i2>%?C84KH>NG4o^b.3BkCi[kKb&MHGo<Z5.+fP>:F!&0:B<m+bC)PGWp2A^XRG-`:
%rr#VWrqqW)jE^hKJ,QbQeUQ<PmVi+"5<aPoQ_/_UH[?Z[pKrCIrD3I\k9'`_%mU$jQ[eQ&5Q1B'5Q1*3+9)U>b"r'0r21Wcs79$9
%qOdf_o1qUKl0nZBIpq;'f*?d!]>+0fs7%cBidV%4""+Z~>
%AI9_PrivateDataEnd
